projectname,classification,commenttext
hibernate-distribution-3.3.2.GA,DEFECT,"// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types..."
hibernate-distribution-3.3.2.GA,DEFECT,// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)
hibernate-distribution-3.3.2.GA,DEFECT,"//TODO: This is assertion is disabled because there is a bug that means the //	  original owner of a transient, uninitialized collection is not known //	  if the collection is re-referenced by a different object associated //	  with the current Session //throw new AssertionFailure(""bug loading unowned collection"");"
hibernate-distribution-3.3.2.GA,DEFECT,"// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway."
hibernate-distribution-3.3.2.GA,DEFECT,"//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!"
hibernate-distribution-3.3.2.GA,DEFECT,"// could happen for custom Criteria impls.  Not likely, but... // 		for long term solution, see HHH-3514"
hibernate-distribution-3.3.2.GA,DEFECT,//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id
hibernate-distribution-3.3.2.GA,DEFECT,//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)
hibernate-distribution-3.3.2.GA,DEFECT,"//TODO: entities CAN be compared, by PK and entity name, fix this!"
hibernate-distribution-3.3.2.GA,DEFECT,// TODO: does not work for EntityMode.DOM4J yet!
hibernate-distribution-3.3.2.GA,DEFECT,"// TODO: Deal with the ""optional"" attribute in the <join> mapping; // this code assumes that optional defaults to ""true"" because it // doesn't actually seem to work in the fetch=""join"" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking..."
hibernate-distribution-3.3.2.GA,DEFECT,"//TODO: would be nice to use false, but issues with MS SQL"
hibernate-distribution-3.3.2.GA,DEFECT,"//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state"
hibernate-distribution-3.3.2.GA,DEFECT,//TODO: this is kinda inconsistent with CollectionType
hibernate-distribution-3.3.2.GA,DEFECT,"// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>."
hibernate-distribution-3.3.2.GA,DEFECT,"//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values...."
hibernate-distribution-3.3.2.GA,DEFECT,//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()
hibernate-distribution-3.3.2.GA,DEFECT,// TODO: this disables laziness even in non-pojo entity modes:
hibernate-distribution-3.3.2.GA,DEFECT,"// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values"
hibernate-distribution-3.3.2.GA,DEFECT,//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete
hibernate-distribution-3.3.2.GA,DEFECT,//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)
hibernate-distribution-3.3.2.GA,DEFECT,// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.
hibernate-distribution-3.3.2.GA,DEFECT,//TODO: is this completely correct?
hibernate-distribution-3.3.2.GA,DEFECT,// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()
hibernate-distribution-3.3.2.GA,DEFECT,// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };
hibernate-distribution-3.3.2.GA,DEFECT,"// First, validate all the enabled filters... //TODO: this implementation has bad performance"
hibernate-distribution-3.3.2.GA,DEFECT,"//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!"
hibernate-distribution-3.3.2.GA,DEFECT,// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type
hibernate-distribution-3.3.2.GA,DEFECT,"/*		  * Algorithm		  * Check for any level one nullability breaks		  * Look at non null components to		  *   recursively check next level of nullability breaks		  * Look at Collections contraining component to		  *   recursively check next level of nullability breaks		  *		  *		  * In the previous implementation, not-null stuffs where checked		  * filtering by level one only updateable		  * or insertable columns. So setting a sub component as update=""false""		  * has no effect on not-null check if the main component had good checkeability		  * In this implementation, we keep this feature.		  * However, I never see any documentation mentioning that, but it's for		  * sure a limitation.		  */"
hibernate-distribution-3.3.2.GA,DEFECT,"// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert"
hibernate-distribution-3.3.2.GA,DEFECT,// todo : this call will not work for anything other than pojos!
hibernate-distribution-3.3.2.GA,DEFECT,//note that this implementation is kinda broken //for components with many-to-one associations
hibernate-distribution-3.3.2.GA,DEFECT,"//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values"
hibernate-distribution-3.3.2.GA,DEFECT,// TODO : this is broke for subqueries in statements other than selects...
hibernate-distribution-3.3.2.GA,DEFECT,"/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */"
hibernate-distribution-3.3.2.GA,DEFECT,// TODO : should this be an error?
hibernate-distribution-3.3.2.GA,DEFECT,"// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 		being further de-referenced... // 2) is this a DML statement // 3) we were asked to generate any needed joins (generateJoins==true) *OR* //		we are currently processing a select or from clause // (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) // // The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check // intended solely for use within the test suite.  This forces the // implicit join resolution to behave more like the classic parser. // The underlying issue is that classic translator is simply wrong // about its decisions on whether or not to render an implicit join // into a physical SQL join in a lot of cases.  The piece it generally // tends to miss is that INNER joins effect the results by further // restricting the data set!  A particular manifestation of this is // the fact that the classic translator will skip the physical join // for ToOne implicit joins *if the query is shallow*; the result // being that Query.list() and Query.iterate() could return // different number of results!"
hibernate-distribution-3.3.2.GA,DEFECT,"// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //		joinSequence = joinSequence.getFromPart();	// Emulate the old addFromOnly behavior."
hibernate-distribution-3.3.2.GA,DEFECT,"// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, ""current_timestamp(?1)"", false) // but this appears not to work. // Jay Nance 2006-09-22"
hibernate-distribution-3.3.2.GA,DEFECT,"//TODO: would be nice to use false, but issues with MS SQL"
hibernate-distribution-3.3.2.GA,DEFECT,"//TODO: inexact, what we really need to know is: are any outer joins used?"
hibernate-distribution-3.3.2.GA,DEFECT,"//TODO: would be nice to use false, but issues with MS SQL"
hibernate-distribution-3.3.2.GA,DEFECT,"// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work..."
hibernate-distribution-3.3.2.GA,DEFECT,// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.
hibernate-distribution-3.3.2.GA,DEFECT,"//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2"
hibernate-distribution-3.3.2.GA,DEFECT,// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....
hibernate-distribution-3.3.2.GA,DEFECT,//TODO: BUG! this currently fails for named queries for non-POJO entities
hibernate-distribution-3.3.2.GA,DEFECT,"//FIXME we don't have the associated entity table name here, has to be done in a second pass"
hibernate-distribution-3.3.2.GA,DEFECT,// this call is side-effecty
hibernate-distribution-3.3.2.GA,DEFECT,"// RDMS does not directly support the trim() function, we use rtrim() and ltrim()"
hibernate-distribution-3.3.2.GA,DEFECT,// note: at least my local SQL Server 2005 Express shows this not working...
hibernate-distribution-3.3.2.GA,DEFECT,// note: at least my local MySQL 5.1 install shows this not working...
hibernate-distribution-3.3.2.GA,DESIGN,"// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable"
hibernate-distribution-3.3.2.GA,DESIGN,//perhaps not really necessary...
hibernate-distribution-3.3.2.GA,DESIGN,// todo : what else to do here?
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: disable batch loading if lockMode > READ?
hibernate-distribution-3.3.2.GA,DESIGN,// todo : what else to do here?
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: to handle concurrent writes correctly, the client should pass in a Lock"
hibernate-distribution-3.3.2.GA,DESIGN,"// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*"
hibernate-distribution-3.3.2.GA,DESIGN,//note there is a wierd implementation in the client side
hibernate-distribution-3.3.2.GA,DESIGN,// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.
hibernate-distribution-3.3.2.GA,DESIGN,// Do we need to drop constraints before dropping tables in this dialect?
hibernate-distribution-3.3.2.GA,DESIGN,"/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */"
hibernate-distribution-3.3.2.GA,DESIGN,// Does this dialect support check constraints?
hibernate-distribution-3.3.2.GA,DESIGN,// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start
hibernate-distribution-3.3.2.GA,DESIGN,// Does this dialect support the UNIQUE column syntax?
hibernate-distribution-3.3.2.GA,DESIGN,// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:
hibernate-distribution-3.3.2.GA,DESIGN,// Does this dialect support the FOR UPDATE syntax?
hibernate-distribution-3.3.2.GA,DESIGN,// todo : what is the implication of this?
hibernate-distribution-3.3.2.GA,DESIGN,// todo : YUCK!!!
hibernate-distribution-3.3.2.GA,DESIGN,"// todo : again, how *should* this work for non-pojo entities?"
hibernate-distribution-3.3.2.GA,DESIGN,"// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?"
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: really bad, evil hack to fix!!!"
hibernate-distribution-3.3.2.GA,DESIGN,"//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?"
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: better to degrade to lazy=""false"" if uninstrumented"
hibernate-distribution-3.3.2.GA,DESIGN,// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?
hibernate-distribution-3.3.2.GA,DESIGN,"/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */"
hibernate-distribution-3.3.2.GA,DESIGN,//Icky workaround for MySQL bug:
hibernate-distribution-3.3.2.GA,DESIGN,// we have to set up the table later!! yuck
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: Somehow add the newly created foreign keys to the internal collection
hibernate-distribution-3.3.2.GA,DESIGN,// This inner class implements a case statement....perhaps im being a bit over-clever here
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: merge into one method!
hibernate-distribution-3.3.2.GA,DESIGN,// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()
hibernate-distribution-3.3.2.GA,DESIGN,// TODO: what type?
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: inefficient
hibernate-distribution-3.3.2.GA,DESIGN,//FIXME: get the PersistentClass
hibernate-distribution-3.3.2.GA,DESIGN,// todo : we can remove this once the deprecated ctor can be made private...
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: redesign how PropertyAccessors are acquired...
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : not so sure this is needed...
hibernate-distribution-3.3.2.GA,DESIGN,// todo : we can remove this once the deprecated ctor can be made private...
hibernate-distribution-3.3.2.GA,DESIGN,//create an index on the key columns??
hibernate-distribution-3.3.2.GA,DESIGN,"/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a			 * slightly higer level in the stack (to get all the information we need)			 * Right now HbmBinder does not support the			 */"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: improve this hack!
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters)."
hibernate-distribution-3.3.2.GA,DESIGN,//use of trim() here is ugly?
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a ""PropertyAccessor"" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()"
hibernate-distribution-3.3.2.GA,DESIGN,// can happen because of the multiple ways Cache.remove() // can be invoked :(
hibernate-distribution-3.3.2.GA,DESIGN,//ick!
hibernate-distribution-3.3.2.GA,DESIGN,// todo : we can remove this once the deprecated ctor can be made private...
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load"
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: should this be Session.instantiate(Persister, ...)?"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: suck this into initLaziness!
hibernate-distribution-3.3.2.GA,DESIGN,// todo : we can remove this once the deprecated ctor can be made private...
hibernate-distribution-3.3.2.GA,DESIGN,"// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage)."
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: is this right??
hibernate-distribution-3.3.2.GA,DESIGN,//ie. the subquery! yuck!
hibernate-distribution-3.3.2.GA,DESIGN,//use of a stringbuffer to workaround a JDK bug
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: copy/paste from recreate()
hibernate-distribution-3.3.2.GA,DESIGN,"//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL"
hibernate-distribution-3.3.2.GA,DESIGN,// todo : this eventually needs to be removed
hibernate-distribution-3.3.2.GA,DESIGN,// todo : remove
hibernate-distribution-3.3.2.GA,DESIGN,"//just to help out during the load (ugly, i know)"
hibernate-distribution-3.3.2.GA,DESIGN,// hack/workaround as sqlquery impl depend on having a key.
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: handle the case of a foreign key to something other than the pk
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: assumes all collections disassemble to an array!
hibernate-distribution-3.3.2.GA,DESIGN,// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...
hibernate-distribution-3.3.2.GA,DESIGN,// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: deprecated, remove eventually"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO possibly relax that
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)"
hibernate-distribution-3.3.2.GA,DESIGN,//use a degenerated strategy for backward compatibility
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: this is temporary in that the end result will probably not take a Property reference per-se.
hibernate-distribution-3.3.2.GA,DESIGN,// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.
hibernate-distribution-3.3.2.GA,DESIGN,// get the right object from the list ... would it be easier to just call getEntity() ??
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO: should ""record"" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: this dependency is kinda Bad
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: get SQL rendering out of this package!
hibernate-distribution-3.3.2.GA,DESIGN,// why does this matter?
hibernate-distribution-3.3.2.GA,DESIGN,"// important, to account for newly saved entities in query // todo : some kind of check for new status..."
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: get SQL rendering out of this package!
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: can we *always* use the ""null property"" approach for everything?"
hibernate-distribution-3.3.2.GA,DESIGN,"// does this need holdlock also? : return tableName + "" with (updlock, rowlock, holdlock)"";"
hibernate-distribution-3.3.2.GA,DESIGN,"//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays"
hibernate-distribution-3.3.2.GA,DESIGN,// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...
hibernate-distribution-3.3.2.GA,DESIGN,"// sql-server, at least needed this dropped after use; strange!"
hibernate-distribution-3.3.2.GA,DESIGN,// is it necessary to register %exact since it can only appear in a where clause?
hibernate-distribution-3.3.2.GA,DESIGN,"//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays"
hibernate-distribution-3.3.2.GA,DESIGN,// Does this dialect support the ALTER TABLE syntax?
hibernate-distribution-3.3.2.GA,DESIGN,"// This next bit is to allow for both unsaved-value=""negative"" // and for ""older"" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: reenable if we also fix the above todo
hibernate-distribution-3.3.2.GA,DESIGN,// orphans should not be deleted during copy??
hibernate-distribution-3.3.2.GA,DESIGN,// orphans should not be deleted during merge??
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: suck this logic into the collection!
hibernate-distribution-3.3.2.GA,DESIGN,// todo : we can actually just determine this from the incoming EntityEntry-s
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't"
hibernate-distribution-3.3.2.GA,DESIGN,// this class has no proxies (so do a shortcut)
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)
hibernate-distribution-3.3.2.GA,DESIGN,"// todo : need map? the prob is a proper key, right?"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: better to pass the id in as an argument?
hibernate-distribution-3.3.2.GA,DESIGN,//do we even really need this? the update will fail anyway....
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: would it be better to do a refresh from db?
hibernate-distribution-3.3.2.GA,DESIGN,"/**	 * This form used from annotations (?).  Essentially the same as the above using a	 * resultset-mapping reference, but without cacheMode, readOnly, and comment.	 *	 * FIXME: annotations do not use it, so it can be remove from my POV	 * @deprecated	 *	 *	 * @param query The sql query string	 * @param resultSetRef The result-set-mapping name	 * @param querySpaces Any specified query spaces (used for auto-flushing)	 * @param cacheable Whether the query results are cacheable	 * @param cacheRegion If cacheable, the region into which to store the results	 * @param timeout A JDBC-level timeout to be applied	 * @param fetchSize A JDBC-level fetch-size to be applied	 * @param flushMode The flush mode to use for this query	 * @param parameterTypes parameter type map	 * @param callable Does the query string represent a callable object (i.e., proc)	 */"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: ugly here:
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: not quite sure about the full implications of this!
hibernate-distribution-3.3.2.GA,DESIGN,// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!
hibernate-distribution-3.3.2.GA,DESIGN,"// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)..."
hibernate-distribution-3.3.2.GA,DESIGN,"// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This ""works"" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the ""close result set"" // processing from the (sandbox/jdbc) jdbc-container code."
hibernate-distribution-3.3.2.GA,DESIGN,// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!
hibernate-distribution-3.3.2.GA,DESIGN,//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...
hibernate-distribution-3.3.2.GA,DESIGN,// todo : should we check the current isolation mode explicitly?
hibernate-distribution-3.3.2.GA,DESIGN,// brand new collection //TODO: or an array!! we can't lock objects with arrays now??
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities"
hibernate-distribution-3.3.2.GA,DESIGN,"// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better"
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?
hibernate-distribution-3.3.2.GA,DESIGN,"/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */"
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it
hibernate-distribution-3.3.2.GA,DESIGN,"// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence"
hibernate-distribution-3.3.2.GA,DESIGN,"// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!"
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : better way?!?
hibernate-distribution-3.3.2.GA,DESIGN,"/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around ""ghost"" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL"
hibernate-distribution-3.3.2.GA,DESIGN,// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(
hibernate-distribution-3.3.2.GA,DESIGN,"// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck."
hibernate-distribution-3.3.2.GA,DESIGN,"// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly..."
hibernate-distribution-3.3.2.GA,DESIGN,//TODO:this is only needed during compilation .. can we eliminate the instvar?
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : absolutely no usages of this constructor form; can it go away?
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: is this a bit ugly?
hibernate-distribution-3.3.2.GA,DESIGN,"// even here, if only properties mapped to the ""base table"" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate"
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : remove these last two as batcher is no longer managing connections
hibernate-distribution-3.3.2.GA,DESIGN,"// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information."
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses"
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!
hibernate-distribution-3.3.2.GA,DESIGN,// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...
hibernate-distribution-3.3.2.GA,DESIGN,// implicit joins are always(?) ok to reuse
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: used to be exprNoParens! was this needed?
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.
hibernate-distribution-3.3.2.GA,DESIGN,// we do not know either type //BLIND GUESS!
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression."
hibernate-distribution-3.3.2.GA,DESIGN,"// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)"
hibernate-distribution-3.3.2.GA,DESIGN,// short-circuit for performance...
hibernate-distribution-3.3.2.GA,DESIGN,"// not absolutely necessary, but does help with aggressive release"
hibernate-distribution-3.3.2.GA,DESIGN,// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: implement functionality //  this might be painful to do here, as the ""join post processing"" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A ""simple"" solution here might to //  perform ""join post processing"" once for the entire query (including //  any subqueries) at one fell swoop"
hibernate-distribution-3.3.2.GA,DESIGN,//yuck!
hibernate-distribution-3.3.2.GA,DESIGN,"// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling..."
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: make this a bit nicer
hibernate-distribution-3.3.2.GA,DESIGN,// yuck!
hibernate-distribution-3.3.2.GA,DESIGN,// todo : potentially look at optimizing these two arrays
hibernate-distribution-3.3.2.GA,DESIGN,//note that i parameter is now unused (delete it?)
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin."
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : this constructor form is *only* used from constructor directly below us; can it go away?
hibernate-distribution-3.3.2.GA,DESIGN,// todo : remove
hibernate-distribution-3.3.2.GA,DESIGN,"// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions."
hibernate-distribution-3.3.2.GA,DESIGN,"// todo : should this get moved to PersistentContext? // logically, is PersistentContext the ""thing"" to which an interceptor gets attached?"
hibernate-distribution-3.3.2.GA,DESIGN,// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: optimize this better!
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: should we allow suffixes on these ?
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: is this really necessary????
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : not sure the best way to handle this. // The non-performant way :
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: is there a better way?
hibernate-distribution-3.3.2.GA,DESIGN,//The class is now way to complex!
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...
hibernate-distribution-3.3.2.GA,DESIGN,//name from a super query (a bit inelegant that it shows up here)
hibernate-distribution-3.3.2.GA,DESIGN,//real hacky... // used to count the nesting of parentheses
hibernate-distribution-3.3.2.GA,DESIGN,// todo : we can remove this once the deprecated ctor can be made private...
hibernate-distribution-3.3.2.GA,DESIGN,"//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync"
hibernate-distribution-3.3.2.GA,DESIGN,"// ugly hack for cases like ""elements(foo.bar.collection)"" // (multi-part path expression ending in elements or indices)"
hibernate-distribution-3.3.2.GA,DESIGN,// FIXME Hacky workaround to JBCACHE-1202
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: COPY/PASTE FROM SessionImpl, pull up!"
hibernate-distribution-3.3.2.GA,DESIGN,"// todo : need to find a clean way to handle the ""event source"" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable..."
hibernate-distribution-3.3.2.GA,DESIGN,//Must be done here because of side-effect! yuck...
hibernate-distribution-3.3.2.GA,DESIGN,//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.
hibernate-distribution-3.3.2.GA,DESIGN,// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value
hibernate-distribution-3.3.2.GA,DESIGN,"// Needed the ""clazz_"" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?"
hibernate-distribution-3.3.2.GA,DESIGN,//work around a bug in all known connection pools....
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: reuse the PreLoadEvent
hibernate-distribution-3.3.2.GA,DESIGN,// Need a better way to define the suffixes here...
hibernate-distribution-3.3.2.GA,DESIGN,//workaround for WebLogic
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: temporary
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : YUCK!!!  fix after HHH-1907 is complete
hibernate-distribution-3.3.2.GA,DESIGN,// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)
hibernate-distribution-3.3.2.GA,DESIGN,"// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...
hibernate-distribution-3.3.2.GA,DESIGN,"// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be"
hibernate-distribution-3.3.2.GA,DESIGN,//This is not very nice (and quite slow):
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: get SQL rendering out of here
hibernate-distribution-3.3.2.GA,DESIGN,// meant to handle dynamic instantiation queries...(Copy from QueryLoader)
hibernate-distribution-3.3.2.GA,DESIGN,// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?
hibernate-distribution-3.3.2.GA,DESIGN,// worrying about proxies is perhaps a little bit of overkill here...
hibernate-distribution-3.3.2.GA,DESIGN,// todo : throw exception?  maybe warn if not the same?
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible"
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]
hibernate-distribution-3.3.2.GA,DESIGN,"//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?"
hibernate-distribution-3.3.2.GA,DESIGN,// todo : we can remove this once the deprecated ctor can be made private...
hibernate-distribution-3.3.2.GA,DESIGN,// TODO: copy/paste from ManyToOneType
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: code duplication with SingleTableEntityPersister
hibernate-distribution-3.3.2.GA,DESIGN,// todo : throw exception?
hibernate-distribution-3.3.2.GA,DESIGN,//should this interface extend PropertyMapping?
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!
hibernate-distribution-3.3.2.GA,DESIGN,// todo : we can remove this once the deprecated ctor can be made private...
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: implement caching?! proxies?!
hibernate-distribution-3.3.2.GA,DESIGN,// is this really necessary?
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call"
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: this is a bit arbitrary, expose a switch to the user?"
hibernate-distribution-3.3.2.GA,DESIGN,"/**	 * @return collection removal	 * FIXME: even if isInverse=""true""?	 */"
hibernate-distribution-3.3.2.GA,DESIGN,// TODO: Fix this so it will work for non-POJO entity mode
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: would be nice to handle proxy classes elegantly!
hibernate-distribution-3.3.2.GA,DESIGN,"//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: is there a more elegant way than downcasting?
hibernate-distribution-3.3.2.GA,DESIGN,// todo : remove
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: remove use of instanceof!
hibernate-distribution-3.3.2.GA,DESIGN,//create an index on the key columns??
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: make this a bit nicer
hibernate-distribution-3.3.2.GA,DESIGN,// todo : we can remove this once the deprecated ctor can be made private...
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: perhaps this should be some other RuntimeException...
hibernate-distribution-3.3.2.GA,DESIGN,//Yuck:
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors
hibernate-distribution-3.3.2.GA,DESIGN,// todo : this eventually needs to be removed
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: design new lifecycle for ProxyFactory
hibernate-distribution-3.3.2.GA,DESIGN,"// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here"
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO: Should this really return null?  If not, figure out something better to do here."
hibernate-distribution-3.3.2.GA,DESIGN,// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...
hibernate-distribution-3.3.2.GA,DESIGN,"// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-""indexed"" scenarios?"
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO : make this the factory for ""entity mode related"" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a ""SessionContext"", and // ConnectionManager is a ""JDBCContext""?  A ""SessionContext"" should // live in the impl package..."
hibernate-distribution-3.3.2.GA,DESIGN,// create an index on the key columns??
hibernate-distribution-3.3.2.GA,DESIGN,//is this ok?
hibernate-distribution-3.3.2.GA,DESIGN,"//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names"
hibernate-distribution-3.3.2.GA,DESIGN,// perhaps this should be an exception since it is only ever used // in the above method?
hibernate-distribution-3.3.2.GA,DESIGN,// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..
hibernate-distribution-3.3.2.GA,DESIGN,"// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?"
hibernate-distribution-3.3.2.GA,DESIGN,"//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?"
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);"
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge"
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: not quite sure about the full implications of this!
hibernate-distribution-3.3.2.GA,DESIGN,//this is kinda the best we can do...
hibernate-distribution-3.3.2.GA,DESIGN,/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: this needn't exclude subclasses...
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: we use two visitors here, inefficient!"
hibernate-distribution-3.3.2.GA,DESIGN,/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?
hibernate-distribution-3.3.2.GA,DESIGN,"// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and ""do the right thing"" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source"
hibernate-distribution-3.3.2.GA,DESIGN,"//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)"
hibernate-distribution-3.3.2.GA,DESIGN,// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()
hibernate-distribution-3.3.2.GA,DESIGN,//I suppose?
hibernate-distribution-3.3.2.GA,DESIGN,"// TBD should this be varbinary($1)? //		registerColumnType(Types.VARBINARY,     ""binary($1)"");"
hibernate-distribution-3.3.2.GA,DESIGN,//shortcut
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO : probably better to calculate these and pass them in, as it'll be more performant"
hibernate-distribution-3.3.2.GA,DESIGN,// todo : should we additionally check the current isolation mode explicitly?
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: simply remove this override //      if we fix the above todos
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: get SQL rendering out of this package!
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: get SQL rendering out of this package!
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: get SQL rendering out of this package!
hibernate-distribution-3.3.2.GA,DESIGN,// todo : is there really any reason to kkeep trying if this fails once?
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO : not sure this is correct, could not find docs on how to do this."
hibernate-distribution-3.3.2.GA,DESIGN,//HSQL has no Blob/Clob support .... but just put these here for now!
hibernate-distribution-3.3.2.GA,DESIGN,"// merges don't cascade to uninitialized collections //			//TODO: perhaps this does need to cascade after all...."
hibernate-distribution-3.3.2.GA,DESIGN,// yick!  need this for proper serialization/deserialization handling...
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: should orphans really be deleted during lock???
hibernate-distribution-3.3.2.GA,DESIGN,// todo : move to StringHelper?
hibernate-distribution-3.3.2.GA,DESIGN,// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO: It would be really, really nice to use this to also model components!"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: move to .sql package!!
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : add this info to the translator and aggregate it here...
hibernate-distribution-3.3.2.GA,DESIGN,//TODO possibly relax that
hibernate-distribution-3.3.2.GA,DESIGN,//TODO possibly relax that
hibernate-distribution-3.3.2.GA,DESIGN,// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: code duplication with JoinedSubclassEntityPersister
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: refactor to .sql package
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: *two* hashmap lookups here is one too many...
hibernate-distribution-3.3.2.GA,DESIGN,"//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses"
hibernate-distribution-3.3.2.GA,DESIGN,"// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?"
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface"
hibernate-distribution-3.3.2.GA,DESIGN,// Do we need to qualify index names with the schema name?
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: We probably should have a StatisticsNotPublishedException, to make it clean"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: get SQL rendering out of this package!
hibernate-distribution-3.3.2.GA,DESIGN,//yukky! Don't you have subclasses for that! //TODO race conditions can happen here
hibernate-distribution-3.3.2.GA,DESIGN,// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: need to make the majority of this functionality into a top-level support class for custom impl support
hibernate-distribution-3.3.2.GA,DESIGN,"// for DOM4J ""collections"" only // TODO: it would be better if this was done at the higher level by Printer"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: inefficient if that cache is just going to ignore the updated state!
hibernate-distribution-3.3.2.GA,DESIGN,// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()
hibernate-distribution-3.3.2.GA,DESIGN,//TODO:refactor + make this method private
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...
hibernate-distribution-3.3.2.GA,DESIGN,// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...
hibernate-distribution-3.3.2.GA,DESIGN,// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop
hibernate-distribution-3.3.2.GA,DESIGN,//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults
hibernate-distribution-3.3.2.GA,DESIGN,"// work around that crazy issue where the tree contains // ""empty"" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()"
hibernate-distribution-3.3.2.GA,DESIGN,"//kinda ugly, but needed for collections with a ""."" node mapping"
hibernate-distribution-3.3.2.GA,DESIGN,//FIXME: get the PersistentClass
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id"
hibernate-distribution-3.3.2.GA,DESIGN,// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: is this really necessary????
hibernate-distribution-3.3.2.GA,DESIGN,//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: move to .sql package, and refactor with similar things!"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: I am not so sure about the exception handling in this bit!
hibernate-distribution-3.3.2.GA,DESIGN,//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties
hibernate-distribution-3.3.2.GA,DESIGN,// append the SQL to return the generated identifier //TODO: suck into Insert
hibernate-distribution-3.3.2.GA,DESIGN,"//This is really ugly, but necessary:"
hibernate-distribution-3.3.2.GA,DESIGN,// todo : modify the class definition if not already transformed...
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: should we use SELECT .. FOR UPDATE?
hibernate-distribution-3.3.2.GA,DESIGN,"/** Create an action that will evict collection and entity regions based on queryspaces (table names).	 *  TODO: cache the autodetected information and pass it in instead.	 **/"
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: is this 100% correct?
hibernate-distribution-3.3.2.GA,DESIGN,/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////
hibernate-distribution-3.3.2.GA,DESIGN,// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..
hibernate-distribution-3.3.2.GA,DESIGN,//use of a stringbuffer to workaround a JDK bug
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: move into collection type, so we can use polymorphism!"
hibernate-distribution-3.3.2.GA,DESIGN,// TODO should we just collect these like with the collections above?
hibernate-distribution-3.3.2.GA,DESIGN,"// todo : should really move this log statement to CollectionType, where this is used from..."
hibernate-distribution-3.3.2.GA,DESIGN,// FIXME Hacky workaround to JBCACHE-1202
hibernate-distribution-3.3.2.GA,DESIGN,//hum ... should we cascade anyway? throw an exception? fine like it is?
hibernate-distribution-3.3.2.GA,DESIGN,// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: copy/paste from insertRows()
hibernate-distribution-3.3.2.GA,DESIGN,//TODO: suck into event class
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: never reached, since getTypeName() actually throws an exception!"
hibernate-distribution-3.3.2.GA,DESIGN,"// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider"
hibernate-distribution-3.3.2.GA,DESIGN,// xmlforest requires a new kind of function constructor
hibernate-distribution-3.3.2.GA,DESIGN,// TODO Is this a valid operation on a timestamps cache?
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used"
hibernate-distribution-3.3.2.GA,DESIGN,// TODO Why not use the timestamp in a DataVersion?
hibernate-distribution-3.3.2.GA,DESIGN,// todo : eventually merge this with TreeCache and just add optional opt-lock support there.
hibernate-distribution-3.3.2.GA,DESIGN,"/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */"
hibernate-distribution-3.3.2.GA,DESIGN,"/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */"
hibernate-distribution-3.3.2.GA,DESIGN,"// work around the ""feature"" where tree cache is validating the // inserted node during the next transaction.  no idea..."
hibernate-distribution-3.3.2.GA,DESIGN,"/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */"
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used"
hibernate-distribution-3.3.2.GA,DESIGN,// can happen because of the multiple ways Cache.remove() // can be invoked :(
hibernate-distribution-3.3.2.GA,DESIGN,//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)
hibernate-distribution-3.3.2.GA,DESIGN,// unhappy about this being public ... is there a better way?
hibernate-distribution-3.3.2.GA,DESIGN,"// TODO : safe to interpret ""map.remove(key) == null"" as non-dirty?"
hibernate-distribution-3.3.2.GA,DESIGN,// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node
hibernate-distribution-3.3.2.GA,DESIGN,"// work around the ""feature"" where tree cache is validating the // inserted node during the next transaction. no idea..."
hibernate-distribution-3.3.2.GA,DESIGN,// TODO Is this a valid operation on a timestamps cache?
hibernate-distribution-3.3.2.GA,DESIGN,// todo : what else to do here?
hibernate-distribution-3.3.2.GA,DESIGN,// TODO: Replace this with a more elegant solution.
hibernate-distribution-3.3.2.GA,DESIGN,// short cut check...
hibernate-distribution-3.3.2.GA,DESIGN,"//TODO: to handle concurrent writes correctly, this should return a Lock to the client"
hibernate-distribution-3.3.2.GA,DESIGN,"//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync"
hibernate-distribution-3.3.2.GA,DESIGN,"// this is ugly here, but needed because its a subquery"
hibernate-distribution-3.3.2.GA,DESIGN,// TODO : will need reference to session factory to fully complete HHH-1907
hibernate-distribution-3.3.2.GA,DESIGN,//yuck!
hibernate-distribution-3.3.2.GA,DESIGN,// inheritance cycle detection (paranoid check)
hibernate-distribution-3.3.2.GA,DESIGN,// todo : remove
hibernate-distribution-3.3.2.GA,DESIGN,// TODO: encapsulate the protected instance variables!
hibernate-distribution-3.3.2.GA,DESIGN,//polymorphism comment above
hibernate-distribution-3.3.2.GA,DOCUMENTATION,//TODO find a decent name before documenting
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"// add an entry for this type of entity. // we can be assured that all referenced entities have already // been processed, // so specify that this entity is with the latest batch. // doing the batch number before adding the name to the list is // a faster way to get an accurate number."
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// TODO: handle TypeDefs
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"//TODO: get all properties, not just the fetched ones!"
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: native ids
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"// TODO: bindpropertyresults(alias, returnElem)"
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: handle property-ref
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: validate existing of property with the chosen name. (secondpass )
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"//TODO: get all properties, not just the fetched ones!"
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: check that entry.getIdentifier().equals(requestedId)
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// TODO: RESTRICT VIOLATION
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"//TODO: assertion only, could be optimized away"
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"// TODO: lowercasing done here. Was done ""at random"" before; maybe not needed at all ?"
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"//TODO: optimize away this lookup for entities w/o unsaved-value=""undefined"""
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// TODO: toLowerCase was not done before. Only used in Template.
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"//TODO: arithmetic expressions, multiple new Foo(...)"
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: check that entry.getIdentifier().equals(requestedId)
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// TODO: not visible to the user!
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: proxies!
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: can we limit stored procedures ?!
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: formulas ?
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// TODO: better error message since we actually support composites if names are explicitly listed.
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: use these in methods above
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"//TODO: cache the persister, this shows up in yourkit"
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"//TODO: add referencedClass to disambiguate to FKs on the same //      columns, pointing to different tables"
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: create uk loaders for component properties
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// TODO : still need to make CollectionPersisters EntityMode-aware
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: terrible implementation!
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"//TODO: eventually put this back in, once we think all is fixed //Object otherAlias = columnsUnique.put(qualifiedColumn, columnAlias);"
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// TODO: I don't really like this implementation; it would be better if // this was handled by searchForDirtyCollections()
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// TODO: check if key contains the owner ID
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: cache this in an instvar
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// TODO : temporary initial step towards HHH-1907
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// todo : remove this once ComponentMetamodel is complete and merged
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: add owner argument!!
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"//TODO handle supportsNotNullUnique=false, but such a case does not exist in the wild so far"
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// TODO: better error message since we actually support composites if names are explicitly listed.
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: for some dialects it would be appropriate to add the renderOrderByPropertiesSelect() to other select strings
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: unnecessary for databases with ANSI-style joins
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: maybe call it getRowSelection() ?
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: make this handle multiple collection roles!
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: include the rowids!!!!
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"// if we are still not resolved, we might represent a constant. //      needed to add this here because the allowance of //      naked-prop-refs in the grammar collides with the //      definition of literals/constants (""nondeterminism""). //      TODO: cleanup the grammar so that ""processConstants"" is always just handled from here"
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// TODO : or should we return 'containsTableAlias'??
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,/////////////////////////////////////////////////////////////////////// // TODO : look at perhaps caching this...
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: avoid this for non-new instances where mightBeDirty==false
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: theoretically non-threadsafe...
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// todo : look at optimizing these...
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// todo : cache this sql...
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"/**	 * TODO: Check if Mimer SQL cannot handle the way DB2 does	 */"
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"//TODO: if we are using identity columns, fetch the identifier"
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO check there is no actual definition elemnents when a ref is defined
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// table=null -> an association // - fill it in later //TODO fill in the mappings for table == null
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// table=null -> an association - fill // it in later //TODO fill in the mappings for table == null
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: return new Lock(ts);
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// todo : add support for READ_WRITE ( + NONSTRICT_READ_WRITE ??? )
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// TODO : why aren't these the same?
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: proxies!
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: proxies!
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"//TODO: if we support multiple fetch groups, we would need //      to clone the set of lazy properties!"
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO mappings.getLogicalTableName(ownerTable)
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,//TODO: if lock.getTimestamp().equals(ts)
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,"//TODO: always true for now, but not if we later decide to support elements() in the from clause"
hibernate-distribution-3.3.2.GA,IMPLEMENTATION,// we could move this inside if we wanted to // tolerate collection initializations during // collection dirty checking:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// See if the user configured a multiplexer stack
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//root entity comes *last*
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//==elementType ??
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//identifier collections not supported for 1-to-many
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// update removed rows fks to null
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//registerFunction( ""trim"", new StandardSQLFunction( ""trim"", Hibernate.STRING ) );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//			buf.append( selectFragment( lhsAlias, """" ) )//ignore suffix for collection columns!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// initialize the Set of queried identifier spaces (ie. tables)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//use suffix for the entity columns
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the class hierarchy structure
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// remove the current element from insertions. It will be added back later.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//private final String rootTableName;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//INITIALIZATION:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//not null ... (start with 1) is implicit
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// continue loop
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// return existing object or initialized proxy (unless deleted)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the list of entity names that indicate the batch number
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//disassembled state gets put in a new array (we write to cache by value!)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Add these directly to the executions queue
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Execute the SQL:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//sort the updates by fk
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This could also just be true all the time...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the mapping of entity names to their latest batch numbers.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//chop the last union (all)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// note that for sequential scrolling, we make the assumption that // the first persister element is the ""root entity"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//TODO: check this....
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// for deprecated saveOrUpdateCopy()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//INITIALIZATION:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//expressionTerminators.add("",""); // deliberately excluded"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Multi-param numeric dialect functions...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Use theta style (for regression) // Move the node up, after the origin node."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Multi-param date dialect functions...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// add the main query
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//add the restriction to the outer select
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This assumes you will want to ignore any update counts 
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//skip the FROM keyword in params
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Custom sql
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// return a newly loaded object
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// make it circular-reference safe
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//Cope with special cases of AND, NOT, ()"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// subclass closure properties
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// SUBCLASSES
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//need to hydrate it.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//starts with 1, implicitly"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// instantiate a new instance
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// simple nullability constraint
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//we need to upgrade the lock mode to the mode requested
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	register the type of the out param - an Oracle specific type"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// look for a proxy
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// evicts don't cascade to uninitialized collections
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// need to treat this as if it where optimistic-lock=""all"" (dirty does *not* make sense); // first we need to locate the ""loaded"" state // // Note, it potentially could be a proxy, so perform the location the safe way..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// might happen with a managed connection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// don't need subclass tables, because they can't appear in conditions"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// not final-static to avoid possible classcast exceptions if using different oracle drivers.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//private List aliases = new ArrayList();
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// register resolvers set via Environment property
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//update all the modified entries
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// special case where we need to force incloude all subclass joins
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// binary %Stream // character %Stream
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ignore it
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// assumes that types are all of span 1
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// hibernate impelemnts cast in Dialect.java
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a ""generated"" version column)!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// aggregate functions shouldn't be registered, right? //registerFunction( ""list"", new StandardSQLFunction(""list"",Hibernate.STRING) ); // stopped on $list"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//its the given optional object
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the class hierarchy structure
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//decide which ResultSet to get the property value from:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// properties of this class, including inherited properties"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// otherwise assume the parent is the the criteria that created us
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we can go straight to the first required row
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//before adding to collection!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// discriminator column
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Code to handle subclasses of topClass
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//INITIALIZATION:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//NONE, because its the requested lock mode, not the actual! "
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//private final Map propertyTableNumbersByName = new HashMap();
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// CLASS + TABLE
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// required to exception table // iconst_0 // i
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// for now, just ""re-flatten"" the metamodel since this is temporary stuff anyway (HHH-1907)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// checkcast // cast the bean into a raw bean
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// checkcast (case of primitive type) // invokevirtual (case of primitive type)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same)."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/* | this | bean | args | i | raw bean | exception | */
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// new // BulkAccessorException
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//""as"" is not in KEYWORDS"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// getfield // get field ""$JAVASSIST_CALLBACK"" defined already"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// dup
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// putfield // put field ""$JAVASSIST_CALLBACK"" defined already"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Configure the cache to use our TM
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/* local variables | this | callback | */
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// find the batch number associated with the current association, if any."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// invokeinterface
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we *always* assume an instance with a null // identifier or no identifier property is unsaved!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// seems to not really... //	public boolean supportsRowValueConstructorSyntax() { //		return true; //	}"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// below is for Cache' that don't have str in 2007.1 there is str and we register str directly
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// byte
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the column doesnt exist at all.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// note that %string is deprecated
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//If the object is already loaded, return the loaded one"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// create new lock that times out immediately
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// convenience methods relating to operations across arrays of types...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// DISCRIMINATOR
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Use the lower case function name. // Remember whether we're in a SELECT clause or not.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// %upper is deprecated
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// let this take precedence if defined, since it works for // assigned identifiers"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//throw new UnsupportedOperationException(""Can't write to a readonly object"");"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// SUBCLASSES
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The syntax used to add a foreign key constraint to a table.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//note: it is conceptually possible that a UserType could map null to //	  a non-null value, so the following is arguable:"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Execute the SQL:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// note: interfaces is assumed to already contain HibernateProxy.class
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// identifier-commalist
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// note: interfaces is assumed to already contain HibernateProxy.class
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//assembled state gets put in a new array (we read from cache by value!)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// disassemble named parameters
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// remove all collections for the entity from the session-level cache
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// invokeinterface // callback.write*(..)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// JOINS
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to ""fall through"" to using the property mapping."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// classes mentioned in extends not available - so put it in queue
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//propertyTableNumbersByName.put( prop.getName(), join );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Access cached SQL
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//figure out which tables need to be fetched
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	private final List persisters = new ArrayList();"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//figure out which columns are needed
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//figure out which formulas are needed
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//get em on the second pass!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//render the SQL
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// local cache, so we use synchronization"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// SQL strings
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*public static Object[] clone(Class elementClass, Object[] array) {		Object[] result = (Object[]) Array.newInstance( elementClass, array.length );		System.arraycopy(array, 0, result, 0, array.length);		return result;	}*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if there is no resulting row, return null"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// *load_1 // each type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The optional SQL string defined in the where attribute
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//pass this as an argument only to avoid double looking
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// for version properties marked as being generated, make sure they are ""always"" // generated; aka, ""insert"" is invalid; this is dis-allowed by the DTD, // but just to make sure..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// added this caching as I noticed that getType() is being called multiple times...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//information about lazy properties of this class
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If there are any scalars (non-entities) selected, render the select column aliases."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//information about all columns/formulas in class hierarchy
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ( (Column) discrim.getColumnIterator().next() ).setType(type);
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// dynamic filters attached to the class-level
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// assume we are in an auto-commit state
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// CUSTOM SQL
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// model.getKey().setType( new Type( model.getIdentifier() ) );
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The syntax used to add a column to a table
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Completely optional cascading drop clause.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// PROPERTIES
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// IDENTIFIER
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// VERSION
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//operations which cascade as far as the collection also cascade to collection elements
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//WHERE STRING
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// SUBCLASS PROPERTY CLOSURE
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to ""drive"" // the #endRead processing."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//before add :-)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Handle any filters applied to the class level
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general ""unexpected"" case"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// only one-to-one is lazy fetched
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// replicate does cascade to uninitialized collections
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//note early exit here:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/**	 * Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type.	 *	 * @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes)	 * @return a JoinFragment.XXX join type.	 * @see JoinFragment	 * @see SqlTokenTypes	 */"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//deliberately ignore return value!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//strip leading "", """
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if there is no resulting row, return null"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//otherwise return the ""hydrated"" state (ie. associations are not resolved)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The name of the SQL function that transforms a string to lowercase
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//null owner ok??
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// automatically makes a column with the default name if none is specifed by XML
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// just ignore
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if the property mapping consists of all formulas,  // make it non-updateable"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// the user specifically supplied insert=""true"", // which constitutes an illegal combo"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if the property mapping consists of all formulas,  // make it insertable"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//it might be an unwrapped collection reference! //try to find a wrapper (slowish)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Custom SQL
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*package*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// return
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//bad cast
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*ArrayList list = new ArrayList();			list.addAll( getKey().getConstraintColumns() );			list.addAll( getIndex().getConstraintColumns() );			getCollectionTable().createUniqueKey(list);*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//property-refs for associations defined on a //component are not supported, so no need to slice"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we have an embedded composite identifier
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//stops flush being called multiple times if this method is recursively called
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Create a new FROM node for the referenced class.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Custom sql
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// performance op to avoid the array search
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// now get an existing proxy for each row element (if there is one)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ORPHAN DELETE (used for programmer error detection)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// empty means no scoping
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//Enable for HHH-440, which we don't like:"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*(LockMode) anything*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//this.forceCacheRefresh = forceCacheRefresh;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// an ""embedded"" component (composite ids and unique) // note that this does not handle nested components"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// and perform the load
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ALIASES
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// cache these since they are stateless // this one could even be static...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// a nested composite element
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Must occur after resolving identifiers!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Get the persister for the _subclass_
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aliases for composite-id's
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		SQLQueryParser parser = new SQLQueryParser( //				sqlQuery, //				processor.getAlias2Persister(), //				processor.getAlias2Return(), //				aliases, //				collAliases, //				collPersisters, //				suffixes, //				collSuffixes //		); // //		sql = parser.process(); // //		namedParameterBindPoints = parser.getNamedParameters();"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Fetch embedded identifiers propertynames from the ""virtual"" identifier component"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// embedded composite ids ( alias.idname1, alias.idname2 )"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// NOTE: we need to do the wrap here even if its not ""dirty"", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// TODO: skip formulas?
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// invokeinterface // invoke Enabled.getInterceptFieldCallback()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// hibernate seems to ignore this type...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//don't need filters for the static loaders
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// The user requested a ""greater"" (i.e. more restrictive) form of // pessimistic lock"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//do two passes, for collection property-ref!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*public boolean dropTemporaryTableAfterUse() {		//we have to, because postgres sets current tx		//to rollback only after a failed create table		return true;	}*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// select the correct row by either pk or rowid
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//			optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( //					mappedClass, getterNames, setterNames, propTypes //			);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//TODO: eventually, rowIdName[j]"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//include the discriminator and class-level where, but not filters"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//lazy = !join;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//not absolutely necessary, but helps for some //equals()/hashCode() implementations"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// this is a property of the table, which we are updating"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This should only be possible if the caches are constructor injected 
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// transactions marked for rollback-only cause some TM impls to throw exceptions
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// IMPL NOTE : due to the delayed population of setters (setters cached // 		for performance), we really cannot pro0perly define equality for // 		this transformer"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// contained elements:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//        }
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// for non-inverse one-to-many, with a not-null fk, add a backref!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//to stop the class from being unloaded
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// mappings might contain either the ""raw"" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping)."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// for objects that came in via update()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//use dialect default properties
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// increment the version number (if necessary)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//information about all properties in class hierarchy
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); //		log.info( ""Bytecode provider name : "" + provider ); //		BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); //		settings.setBytecodeProvider( bytecodeProvider );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we are using ""all"" or ""dirty"" property-based optimistic locking"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// orphans should be deleted during save/update
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// do a check
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//			sqlAliasSuffixes[i] = element.getColumnAliasSuffix();"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	void setShowSqlEnabled(boolean b) { //		showSql = b; //	} // //	void setFormatSqlEnabled(boolean b) { //		formatSql = b; //	}"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//materialize associations (and initialize the object) later
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//fetch=""join"" overrides default laziness //fetch=""join"" overrides default laziness"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// drop them in reverse order in case db needs it done that way...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row)."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	public ComponentTuplizerFactory getComponentTuplizerFactory() { //		return componentTuplizerFactory; //	}"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Mckoi has no known variation of a ""SELECT ... FOR UPDATE"" syntax..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// it is or was referenced _somewhere_
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the root of the incoming property path matched one // of the embedded composite identifier properties
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// add normal properties
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// add the discriminator
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// handles arrays and newly instantiated collections
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if either its role changed,"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//noncritical, swallow and let the other propagate!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we will need to create new entries
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this piece is needed for usage in select clause
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// no-op. We don't own the cache so we shouldn't stop it.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Get the names of the columns used to link between the collection // owner and the collection elements.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//let's assume that there is only one lazy fetch group, for now!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// more specifically : ""? [op] datetime"" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// don't even bother trying to read any further
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// add normal properties
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// prepend value and type list with null for any positions before the wanted position.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//+ ""_"" + referencedColumnName not used for backward compatibility"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// add the discriminator
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this property belongs on the table and is to be inserted
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// need to extract the component values and check for subtype replacements...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// add the primary key
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// note that for sequential scrolling, we make the assumption that // the first persister element is the ""root entity"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still ""points back"" to a single // root entity for return"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		registerColumnType( Types.BLOB, 16777215, ""mediumblob"" ); //		registerColumnType( Types.BLOB, 65535, ""blob"" );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// delegate already handles PK columns
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// properties of this class, including inherited properties"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//ie. e.status==DELETED
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// kept for backward compatibility until after the 3.1beta5 release of HA
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// legacy behavior, apply the bridge..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if an exception occurs during flush, user must call rollback()"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Turn off includeSubclasses on all FromElements.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// can't just return null here, since that would // cause an owning component to become null"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the object is transient or detached
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Now update only the tables with dirty properties (and the table with the version number)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Render the SQL query
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// registerColumnType(Types.VARBINARY, ""CHARACTER($l)""); // registerColumnType(Types.BLOB, ""CHARACTER($l)"" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, ""CHARACTER($l)"" );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// TODO : shouldnt inserts be Expectations.NONE?
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//a proxy cannot be transient and it breaks ForeignKeys.isTransient
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//don't bother trying to update, we know there is no row there yet"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This is the root level node. // Generate an explicit from clause at the root.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// CHECK
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if all fields are null, we might need to delete existing row"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//stops flush being called multiple times if this method is recursively called
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//note: updates to joined tables can't be batched...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// starting index
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// object have been loaded with setReadOnly(true); HHH-2236
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/**	 * Build a ResultSetMappingDefinition given a containing element for the ""return-XXX"" elements	 *	 * @param resultSetElem The element containing the return definitions.	 * @param path No clue...	 * @param mappings The current processing state.	 * @return The description of the mappings...	 */"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	private List collectionOwnerAliases = new ArrayList(); //	private List collectionAliases = new ArrayList(); //	private List collectionPersisters = new ArrayList(); //	private List collectionResults = new ArrayList();"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Write any appropriate versioning conditional parameters
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//check if the detached object being merged is the parent
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Render the SQL query
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// determine if the collection elements are entities...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Let return-propertys override whatever the persister has for aliases.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// We should use the _current_ object state (ie. after any updates that occurred during flush)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// might need to run a different filter entirely after the flush // because the collection role may have changed
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	  oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// loop through all the associations of the current entity and make sure that they are processed // before the current batch number
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/* COLUMN and TABLE should be renamed but it would break the public API */
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// For many-to-many joins, use the tablename from the queryable collection for the default text."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// For the case of dynamic-update=""true"", we need to generate the UPDATE SQL"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Default to collections sharing entity cache if there is one
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// don't need to check laziness (dirty checking algorithm handles that)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*rootTableName = persistentClass.getRootTable().getQualifiedName( 				factory.getDialect(), 				factory.getDefaultCatalog(), 				factory.getDefaultSchema() 		);*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// For the case of dynamic-update=""false"", or no snapshot, we use the static SQL"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//abort the save (the object is already saved by a circular cascade)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if not ""get"", then try ""is"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// remove initial "" and """
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Default to sharing the entity cache if there is one
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we have the form: trim(trimSource) //      so we trim leading and trailing spaces
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// For the case of dynamic-insert=""true"", we need to generate the INSERT SQL"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// For the case of dynamic-insert=""true"", we need to generate the INSERT SQL"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//the user visible aliases, which are unknown to the superclass, //these are not the actual ""physical"" SQL aliases"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// For the case of dynamic-insert=""false"", use the static SQL"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if a composite key, use ""( (foo = ? and bar = ?) or (foo = ? and bar = ?) )"" for batching //TODO: unnecessary for databases with ANSI-style joins"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// For the case of dynamic-insert=""false"", use the static SQL"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the class hierarchy structure
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//a shortcut if its location didn't change!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// not supported
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// new collections that get found + wrapped // during flush shouldn't be ignored
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// meant to handle dynamic instantiation queries...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// local cache, so we use synchronization"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Always add the collection's query spaces.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// detached collections that get found + reattached // during flush shouldn't be ignored
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we need to utilize dynamic delete statements
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//columns.add(columnName); //aliases.add(tableAlias);
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// otherwise, utilize the static delete statements"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// intentionally empty
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*public boolean equals(Object other) {		read();		return bag.equals(other);	}	public int hashCode(Object other) {		read();		return bag.hashCode();	}*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//final boolean forceCacheRefresh,"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//just a performance opt!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//just a performance opt!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// used to set the type of the parent dot node
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//all joins join to the pk of the driving table
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// more specifically : ""datetime [op] ?"" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//notice that we skip the first table; it is the driving table!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aliases named identifier ( alias.idname )
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//skip the driving table
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//get 'em in the right order (not that it really matters)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*package*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//NOTE EARLY EXIT!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// trying via forName() first to be as close to DriverManager's semantics
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	private boolean showSql; //	private boolean formatSql;"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// try to make sure we don't wrap and already wrapped session
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//render the where and from parts
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// allow these to go through the the real session no matter what
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//we *could* regerate this inside each called method!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//now render the joins
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// create a new batch for this type. The batch number is the number of current batches.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This will add the new from element to the origin.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//now render the select clause
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The keyword used to insert a row without specifying // any column values
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//now tie it all together
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Does the LIMIT clause take a ""maximum"" row number instead of a total number of returned rows?"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//insert/update/delete SQL
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The keyword used to specify a nullable column.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//select SQL
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//overriden to avoid System.exit
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//no need to check laziness, dirty checking handles that"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Fully resolve the map reference, create implicit joins."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// break the outer loop !!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The basic implementation is to simply use the node's text
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// InterSystems Cache' does not current support ""SELECT ... FOR UPDATE"" syntax... // Set your transaction mode to READ_COMMITTED before using"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//cascade to current collection elements
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//not really necessary, but good for consistency..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we can't cascade to non-embedded elements
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//a newly instantiated collection can't have orphans
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// check the version unsaved-value, if appropriate"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Create the SessionFactory from hibernate.cfg.xml
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// handle orphaned entities!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ignore
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// check the id unsaved-value
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 		NOTE: decided to put this here rather than in the above loop as I was nervous about the performance //		of the loop-in-loop especially considering this is far more likely the 'edge case'"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// check to see if it is in the second-level cache
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Custom SQL (would be better if these were private)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,///////////////////////////////////////////////////////////////////////
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// our column span is the number of columns in the PK
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// For property references generate <tablealias>.<columnname> as <projectionalias>
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// KEY
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//force immediate execution of the insert
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Loaded entity instances, by EntityUniqueKey"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Identity map of EntityEntry instances, by the entity instance"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Write HTML footer
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Entity proxies, by EntityKey"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// delete does cascade to uninitialized collections
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Snapshots of current database state for entities // that have *not* been loaded
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// NativeSQL: collect key column and auto-aliases
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Identity map of array holder ArrayHolder instances, by the array instance"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//cannot occur
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//cannot occur
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// try ""get"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// pass control along to the rest of the processing chain
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Set of EntityKeys of deleted objects
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*protected void initPropertyPaths(			final String path,			final Type type,			final String[] columns,			final String[] formulaTemplates,			final Mapping factory)	throws MappingException {		//addFormulaPropertyPath(path, type, formulaTemplates);		initPropertyPaths(path, type, columns, formulaTemplates, factory);	}*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Downgrade locks
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// do nothing...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Deserialize //-----------------------------------------------------------------------
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// do nothing...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Actually the semantics of the next three are really ""Bag"" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	public boolean isShowSqlEnabled() { //		return showSql; //	} // //	public boolean isFormatSqlEnabled() { //		return formatSql; //	}"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*(array==null) ? tempList.size() :*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//sort the updates by pk
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// should be safe to only ever expect EntityPersister references here
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//optimize the hash size to eliminate a rehash.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//unwrap the object
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the entity associated with the current action.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this page intentionally left blank :)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//initialize + unwrap the object
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// do not do anything
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//return the proxied object
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// else no collection element, but also no owner"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ignore
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//overwrite old proxy
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// early exit...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded ""and"") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded ""not"") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// or should it actually throw an exception?
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine ""lazy fetch groups"" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy=""no-proxy"" // // * impl note - lazy=""no-proxy"" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy=""proxy"" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term ""lazy"" here..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The property is a component...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// the ids are fully resolved, so compare them with isDirty(), not isModified()"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//cant instantiate
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if it is a property of an embedded component, invoke on the ""identifier"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// SUBCLASSES
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// otherwise:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// starts with the name of a mapped class (new style)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//treat it just like a new collection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// skip finalize methods
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//do this work only at the very highest level of the load //don't let this method be called recursively
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	public static JDBCException newJDBCException(String string, SQLException root, String sql) { //		string = string + "" ["" + sql + ']'; //		log.error(string, root); //		logExceptions(root); //		return new JDBCException(string, root, sql); //	} // //	public static JDBCException newJDBCException(String string, SQLException root) { //		log.error(string, root); //		logExceptions(root); //		return new JDBCException(string, root); //	}"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//note that each iteration of the loop may add new elements
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/* This can never happen because this rule will always eliminate the child NOT.			case NOT:				return x.getFirstChild();			// (NOT (NOT x) ) => (x)*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we need to obtain the lock before any actions are // executed, since this may be an inverse=""true"" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//no point doing this if NONE was requested
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// while constructor is running
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The keyword used to specify a nullable column.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// while constructor is running
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//there is probably a row there, so try to update //if no rows were updated, we will find out"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// note: interface is assumed to already contain HibernateProxy.class
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//do nothing to avoid a lazy property initialization
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// interfaces // arguments
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Not called at runtime so doesn't matter if its slow :)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//TODO!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Chop off the rest of the tree.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Get the caller
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// prefer re-generation of identity!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Get the caller principals
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// refresh doesn't cascade to uninitialized collections
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//private static final Alias DEFAULT_ALIAS = new Alias(10, null);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//do nothing
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*public boolean isNonExistant(EntityKey key) {		return nonExistantEntityKeys.contains(key);	}*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments()."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*public boolean isNonExistant(EntityUniqueKey key) {		return nonExistentEntityUniqueKeys.contains(key);	}*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//special case ... this is the leaf of the containment graph, even though not immutable"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// iterate all the entities currently associated with the persistence context.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// does this entity entry pertain to the entity persister in which we are interested (owner)?
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//check if the managed object is the parent
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// otherwise, the proxy was pruned during the serialization process"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// adds remove as a sort-of alias for delete...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//unquotedIdentifierColumnName = identifierColumnAlias;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//return lhsPersister.getSubclassPropertyColumnNames(property);
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// saves / updates don't cascade to uninitialized collections
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//EARLY EXIT
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// create our own copy of the user-supplied tuplizer impl map
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if the identifier is quoted, remove the quotes"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//truncate the identifier to the max alias length, less the suffix length"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//full joins are not supported.. yet!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		 You may still have other ResultSets or update counts left to process here //		 but you can't do it now or the ResultSet you just got will be closed"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// properly handle property-ref-based associations
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//$NON-NLS-1
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// add another (inner) nested select // add the main query // close off the inner nested select
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//$NON-NLS-1
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		origin.addDestination( destination ); // This was the cause of HHH-242 //		origin.setType( FROM_FRAGMENT );			// Set the parent node type so that the AST is properly formed. // The destination node will have all the FROM text. // The parent node is a collection join too (voodoo - see JoinProcessor)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//$NON-NLS-1
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// then handle any user-defined entity modes...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//$NON-NLS-1
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// strip off any leading 'and' token
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// if the condition is not already there...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // ""reaping"" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not ""allowed"" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//dontSpace.add(""'"");"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//for MySQL
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Detect discriminator values...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/**	 * Set a custom entity resolver. This entity resolver must be	 * set before addXXX(misc) call.	 * Default value is {@link org.hibernate.util.DTDEntityResolver}	 *	 * @param entityResolver entity resolver to use	 */"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Handle any filters applied to this collection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//handle a property-ref
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//HashMap columnsUnique = new HashMap();
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//null caused some problems
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the ""root from-element"" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*package*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// cascade the refresh prior to refreshing this entity
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//not sure if this would ever be null but wanted to be careful
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//even on inverse=""true"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// PROPERTIES
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*package*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we need to dirty check many-to-ones with not-found=""ignore"" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*package*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// register hibernate types for default use in scalar sqlquery type auto detection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If true then execute db updates, otherwise just generate and display updates"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// SQLFunction implementation
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we only release the connection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//we only check the version when _upgrading_ lock modes
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// deprecated option...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// only carry on if the method has no parameters
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*NativeSQLQueryReturn*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//woops we got an instance of another class hierarchy branch
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// COMPOSITE-ID
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Create an OuterJoinGenerator for this dialect.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if an exception occurs during flush, user must call rollback()"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*<String>*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we need to step through the rows one row at a time (slow)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//final boolean forceCacheRefresh,"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Create an DotNode AST for the path and resolve it.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//its already loaded so don't need to hydrate it
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if an exception occurs during flush, user must call rollback()"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// orphans should be deleted during delete
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// swallow it, and continue to roll back JTA transaction"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// here, we have two possibilities: // 		1) the property-name matches the explicitly identifier property name //		2) the property-name matches the implicit 'id' property name"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// so the transaction is already rolled back, by JTA spec"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we found a collection element in the result set
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this method is a noop if there is a Synchronization!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// register the standard dialect resolver
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// why is all others non final ?
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// even though we might find a pre-existing element by join path, we may not be able to reuse it..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// HELLA IMPORTANT OPTIMIZATION!!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//include the discriminator and class-level where, but not filters"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*return that.type.equals(type) && 			EqualsHelper.equals(that.value, value);*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//null child could occur for no from clause in a filter
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The 'from element' that the property is in.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Since the result set cursor is always left at the first // physical row after the ""last processed"", we need to jump // back one position to get the key value we are interested // in skipping"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// WebSphere, however, is not a sane JEE/JTA container..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// for sane JEE/JTA containers, the transaction itself functions as its identifier..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//swallow, the transaction was finished"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//will be ignored, using the existing Entry instead"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// 60 seconds
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock=""false"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Don't hold a transactional lock for this 
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// some collections are not lazy:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Fix up the resident flag
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Set the attributes of the property reference expression.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the current batch number is the latest batch for this entity type.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//take a snapshot
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Never evict this node
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Create the join element under the from element.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Moved here from SelectClause [jsd]
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// pre-determine and cache the hashcode
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,///////////////////////////////////////////////////////////////////////////
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Make sure the root node for the region exists and  // has a DataVersion that never complains
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//			ps.close(); //just close it; do NOT try to return it to the pool! //NOTE: early exit!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// map of EntityMode -> Tuplizer
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Now write the values of fields onto the prepared statement
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this is a virtual id property...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// create our own copy of the user-supplied tuplizer impl map
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//this one needed only for guessEntityMode()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/* will check current level if some of them are not null		 * or sublevels if they exist		 */"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Build the dynamic-map tuplizer...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Pointbase has no known variation of a ""SELECT ... FOR UPDATE"" syntax..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// then dom4j tuplizer, if dom4j representation is available"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not ""unsaved"" (that is, we rely on foreign keys to keep // database integrity)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// do the work
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// if its an uninitialized proxy it can't be transient
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// We've been here before
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//return the id, so we can use it to reset the proxy id //return result;"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Build the dynamic-map tuplizer...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// return false here, as most databases do not properly support this construct..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// do the work
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// put the ""standard"" tuplizers into the tuplizer map first"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// hit the database, after checking the session cache for a snapshot"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// found a ctor, but it was not publicly accessible so try to request accessibility"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK)."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	private final SessionFactoryImplementor sessionFactory;"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// cached for efficiency...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// sql server just returns automatically
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		this.sessionFactory = sessionFactory;"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//it was not embedded, so the argument is just an id"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// then dom4j tuplizer, if dom4j representation is available"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//where fragment must be empty!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// or its key changed
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//					int parameterStart = getWalker().getNumberOfParametersInSetClause(); //					List allParams = getIdSelectParameterSpecifications(); //					Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// put the ""standard"" tuplizers into the tuplizer map first"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we will need to remove ye olde entries
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// add the current fragment to the THETA_JOINS node
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// force initialize!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// lock doesn't cascade to uninitialized collections
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//return currentId;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//unquotedIdentifierColumnName = null;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//reset the id
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//addInitializedCollection(collection, persister, id);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// CollectionPropertyMapping processes everything except 'index'.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be ""contained"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//reset the version
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Note: this simply constructs a ""raw"" SQL_TOKEN representing the // where fragment and injects this into the tree.  This ""works""; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the default is to simply not lazy fetch properties for now...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// else if it's elements changed
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		 This assumes you will want to ignore any update counts "
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// now rebuild the insertions list. There is a batch for each entry in the name list.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// should be safe to only ever expect EntityPersister references here
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a ""bare"" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// session-start/post-flush persistent state
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// allow the CollectionSnapshot to be serialized
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Add the second join, the one that ends in the destination table."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ATTRIBUTES USED ONLY DURING FLUSH CYCLE
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Create SQL_TOKEN nodes for the columns.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// ""current"" means the reference that was found during flush() "
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// RDMS has no known variation of a ""SELECT ... FOR UPDATE"" syntax..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ignore this row of results! Note the early exit
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// not final-static to avoid possible classcast exceptions if using different oracle drivers.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// found a ctor, but it was not publicly accessible so try to request accessibility"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Add the new node to the map so that we don't create it twice.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//not final because proxy factory creation can fail
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Register the FromElement with the FROM clause, now that we have the names and aliases."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// superclass entity-name
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// cascade-save to collections AFTER the collection owner was saved
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// ""pass along"" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// ""loaded"" means the reference that is consistent  // with the current database state"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// cache the actual id of the object, not the value of the // property-ref, which might not be initialized"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//init the aliases, after initing the constructornode"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Multi-param string dialect functions...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// during flush, we navigate the object graph to // collections and decide what to do with them"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//collection.clearDirty()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The 'from element' that represents the elements of the collection.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// legacy behavior (with no abstract attribute specified)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Constructors are always considered scalar results.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Get ready to start adding nodes.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//use the id column alias
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Collection Types:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// #3 - note that this is also true of ""datetime - :param""..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//collection.clearDirty()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//note: this affects the return value!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Generate the inner join -- The elements need to be joined to the collection they are in.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// otherwise, perform a ""deep equivalence"" check..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// might happen with a managed connection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Need to account for allowable '_' within the variant
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If there is no WHERE node, make one."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Add the type to the list of returned sqlResultTypes.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// create one
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// persists don't cascade to uninitialized collections
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//lobs cannot be compared
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock=""false"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Blobs are ignored by merge()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//value is the entity name
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//optimization
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the map of batch numbers to EntityInsertAction lists
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//optimization //optimization
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//re-snapshot
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// for convenience to save some lookups
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//NOTE: this is not updated when properties are fetched lazily!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//EARLY EXIT!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	public List getCollectionAliases() { //		return collectionAliases; //	} // //	/*public List getCollectionOwners() { //		return collectionOwners; //	}*/ // //	public List getCollectionOwnerAliases() { //		return collectionOwnerAliases; //	} // //	public List getCollectionPersisters() { //		return collectionPersisters; //	} // //	public Map getAlias2Persister() { //		return alias2Persister; //	} // //	/*public boolean isCollectionInitializer() { //		return isCollectionInitializer; //	}*/ // ////	public List getPersisters() { ////		return persisters; ////	} // //	public Map getAlias2OwnerAlias() { //		return alias2OwnerAlias; //	} // //	public List getScalarTypes() { //		return scalarTypes; //	} //	public List getScalarColumnAliases() { //		return scalarColumnAliases; //	} // //	public List getPropertyResults() { //		return propertyResults; //	} // //	public List getCollectionPropertyResults() { //		return collectionResults; //	} // // //	public Map getAlias2Return() { //		return alias2Return; //	}"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//TODO!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//xml is the entity name
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//named query parameter
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//tolerates nulls
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// check to see if our ""propPath"" actually // represents a property on the persister"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Add the token to the AST.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Use the table fromElement and the property name to get the array of column names.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Set up the cache factory
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we need to strip off the embedded parens so that sql-gen does not double these up
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//memory optimization
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// then handle any user-defined entity modes...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*sqlResultTypeList,*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions)."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// metaType is assumed to be single-column type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// End unit of work
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ROW ID
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//MULTITABLES
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//			final List extendsQueue,"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Make sure JBC doesn't look one up
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Get all the select expressions (that we just generated) and render the select.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// visit width-first, then depth"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If the uresolved property path isn't set yet, just use the property name."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Look through the FromElement's children to find any collections of values that should be fetched...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// identifier-commalist
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// collections of values
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// copied from Session:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this should not happen since the DTD prevents it
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// the current join represents the join between a many-to-many association table // and its ""target"" table.  Here we need to apply any additional filters // defined specifically on the many-to-many"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//check basic level one nullablilty
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//values is not null and is checkable, we'll look deeper"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Possibly handle :something parameters for the query ?
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//for non null args, check for components and elements containing components"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//cache the hashcode
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*public PropertyProjection project() {		return Projections.property(getPropertyName());	}*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//persistent collections may have components
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache())."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//test out the optimizer:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		registerColumnType( Types.VARCHAR, 16777215, ""mediumtext"" );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// IDENT might be the name of a class.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//TODO!!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those ""only needed // for regression purposes"".  The SyntheticAndFactory, then, simply injects them as it // encounters them."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//arbitrary on clause ignored!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// from javax.naming.Referenceable
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// both are Timestamps
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// at least one is a plain old Date
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//swallow it (the transaction _was_ successful or successfully rolled back)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//check for all components values in the collection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// after *all* persisters and named queries are registered
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//do the test
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If close() is called, guarantee unbind()"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// or BYTE // or TEXT? // or MONEY
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//noop
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//			        ( implied && DotNode.useThetaStyleImplicitJoins ) ) {"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if the corresponding SQL value is NULL, the reader we got is NULL as well"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Fetch Reader content up to the end - and put characters in a StringBuffer
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Return StringBuffer content as a large String
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The where clause was added to eliminate this statement from Brute Force Searches.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//or Types.LONGVARCHAR?
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//TODO
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Forcefully remove leading ands from where fragments; the grammar will // handle adding them
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// for non-arrays, we don't need to know the element class //elementType.returnedClass();"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Chop off the rest of the tree.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//different nullability rules for pk/fk
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if the types report logical equivalence, return true..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//cache this
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the ""id select"" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//only really need new array during semiresolve!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// classic translator does not support collection of ordinal // param metadata
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//unwrap it
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//cache the hashcode
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// an unfetched association can only point to // an entity that already exists in the db
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// let the interceptor inspect the instance to decide
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*	 * The types represented in the SQL result set.	 *	 * @return The types represented in the SQL result set.	 */"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// let the persister inspect the instance to decide
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//TODO!!!!!!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Create a new FILTERS node as a parent of all filters
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Establish the region root node with a non-locking data version
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//nothing to do
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//nothing to do
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we use the assumed value, if there is one, to avoid hitting // the database"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//int count = 0;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// putfield // new value of the field
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//lobs cannot be compared
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//not really necessary, I guess..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Clobs are ignored by merge() operation
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//the first key found after the given key
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// collections cannot be compared
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//remember the uk value
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//NOOP
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//we must use the ""remembered"" uk value, since it is  //not available from the EntityEntry during assembly"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// collections don't dirty an unversioned parent entity
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// return false;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//NOTE: we avoid joining to the next table if the named property is just the foreign key value
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// the key is the owning entity itself, so get the ID from the key"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//checkForEnd = false;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//ignore subselect keywords
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// copy elements into newly empty target collection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//end of array, start filling again from start"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//we ran out of keys to try
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//the first id found after the given id
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//we ran out of ids to try
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// DISCRIMINATOR
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// get the elements back into the target making sure to handle dirty flag
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// check if collection is currently being loaded
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// check if it is already completely loaded, but unowned"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// initialize this collection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//TODO!!!!!!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// create a new collection wrapper, to be initialized later"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Some JDBC drivers erroneously return an empty array here for a null DB value :/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//cannot batch fetch by unique key (property-ref associations)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we already know current is not null...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//the owner of the association is not the owner of the id
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ----------------------------------------------------------- Constructors
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ----------------------------------------------------- Instance Variables
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// --------------------------------------------------------- Public Methods
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Compare the two maps for equality
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Simple tests that require no synchronization
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//Sybase fail if we don't do that, sigh..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// stream closed in the finally
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// try to ""pretty print"" it"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// otherwise, just dump it"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//its an interface so we can't really tell anything...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//its an interface so we can't really tell anything...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// use default behavior
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//NOTE: early return
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Clone //-----------------------------------------------------------------------
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Serialize //-----------------------------------------------------------------------
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// warning: can cause a recursive calls! (proxy initialization)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// stream closed in the finally
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/* static methods only - hide constructor */
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*&& !('_'==character)*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// returnign null!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// returnign null!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// includes last '.'
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// +1 to include the following '.'
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// first time we find match!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// entityNames may now include slashes for the representations //classname may be an inner class
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// wrapped iterators
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// index of current iterator in the wrapped iterators array
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the current iterator
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the last used iterator
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//it was a boolean expression
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// call this before any Iterator method to make sure that the current Iterator // is not exhausted
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//doable if needed
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// peek ahead
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if we reach the end of the string w/o finding the // matching end, that is an exception"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// there were no queued additions // and the role has a cache
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Print page
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// and this is not a forced initialization during flush
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we have a placeholder, spin forward till we find the end"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// make sure spinning forward did not put us past the end of the buffer...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// First, try to locate this resource through the current // context classloader."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Next, try to locate this resource through this class's classloader"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Next, try to locate this resource through the system classloader"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Anywhere else we should look?
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// would need an IdentitySet for this!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Arrays.asList doesn't do primitive arrays
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_0
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//faster?
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//pass the entity-name, if not a collection-id"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the name of a class
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Its the listener class name
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//allow 9,8,7,6,5,4,3,2,1"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// default to element set if no elements() specified
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// look for the instance by uuid
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// first, lets determine whether to apply cglib or javassist based instrumentation..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Make sure we don't override previous set values
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//entirely optional!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Its the listener instance (or better be)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//context.unbind(boundName);
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//readResolveObject
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//cfg.setProperty(""hibernate.show_sql"", ""true"");"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Defensive, convenience methods"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Make sure you log the exception, as it might be swallowed"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Begin unit of work
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Write HTML header
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Handle actions
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Start the session to be used for this request
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// make the session available to the session factory's ""current context"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// remove session from ""current context"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Eager fetch the collection so we can use it detached
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode(""participants"", FetchMode.JOIN)                .add( Expression.eq(""id"", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// End of first unit of work
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Begin second unit of work
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Reattachment of aPerson
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The getEmailAddresses() might trigger a lazy load of the collection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// We need our tm, so get it now and avoid doing other work // if there is a problem"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*package*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the cache of the actual plans...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// (AS is always optional, for consistency with SQL/OQL)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*package*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// assumes that types are all of span 1
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// process the ""new"" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// is a primitive type // invokespecial
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Start performing the updates
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// array of primitive type // do nothing
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// jdbc params are 1-based
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// don't care...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// handle a path expression or class name that // appears at the start, in the ""new"" HQL // style or an alias that appears at the start // in the ""old"" HQL style"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//important: reuse the same event instances for performance!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// don't care...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// don't care about other param types here, just those explicitly user-defined..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//handle <=, >=, !=, is not, not between, not in"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// jdbc params are 1-based
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// named parameter
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// could be either an ordinal or JPA-positional parameter
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// strip the "" where """
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// a peek ahead showed this as an JPA-positional parameter
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// make sure this ""name"" is an integral"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// at the very least cleanup the data :)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//60 seconds
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//cannot be instantiated
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// transfer an explicitly defined entity name // handle the lazy attribute
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//keep the behavior consistent even for boundary usages
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//keep the behavior consistent even for boundary usages
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// perform the actual work
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ignore
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//do the failfast put outside the scope of the JTA txn
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// get meta's from // <joined-subclass>
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//ignore!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// parameters on the property mapping should // override parameters in the typedef
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//NOTE SPECIAL CASE: // default to join and non-lazy for the ""second join"" // of the many-to-many"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// create the node initially with the param name so that it shows // appropriately in the ""original text"" attribute"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// DYNAMIC INSERT
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// so we ""clock over"" on the first invocation"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// finally handle the exception
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// a ""detached"" collection that belonged to a different entity"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { //		this.componentTuplizerFactory = componentTuplizerFactory; //	}"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//element //index -> id
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//saveOrUpdateCopy() is deprecated!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Set it!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// collectionPersister should not be null, but we don't want to throw // an exception if it is null"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// a ""detached"" collection that originally belonged to the same entity"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		 You may still have other ResultSets or update counts left to process here  //		 but you can't do it now or the ResultSet you just got will be closed "
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Note: For object <-> SQL datatype mappings see: //	 Configuration Manager | Advanced | SQL | System DDL Datatype Mappings // //	TBD	registerColumnType(Types.BINARY,        ""binary($1)""); // changed 08-11-2005, jsl"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// See if the second lookahed token can be an identifier.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Case 2: The current token is after FROM and before '.'.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//do nothing
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation ""From"" is one of the parameters they pass in position ?3 //registerFunction( ""trim"", new SQLFunctionTemplate(Hibernate.STRING, ""trim(?1 ?2 from ?3)"") );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// (EQ NULL b) => (IS_NULL b)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Create nodes that track line and column number.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//do nothing
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Add NOT if it's negated.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// (EQ a NULL) => (IS_NULL a)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// The path AST should be a DotNode, and it should have been evaluated already."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Force a substitution!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if // if // Otherwise, handle the error normally."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// the database now holds a lock + the object is flushed from the cache, // so release the soft lock"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// now update the object .. has to be outside the main if block above (because of collections)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Named Queries:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//grab its state saved at deletion
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// grab its current state
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this will throw an error if there's something wrong.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//slice, to get the columns for this component //property"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// substitutes into values by side-effect
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// (NOT (EQ a b) ) => (NE a b)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// compare to cached state (ignoring collections unless versioned)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// if it was dirtied by a collection only
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// check nullability but do not perform command execute // we'll use scheduled updates for that.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This 'dot' expression now refers to the resulting from element.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// (NOT (LIKE a b) ) => (NOT_LIKE a b)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// detached collection wrappers that get found + reattached // during flush shouldn't be ignored
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ie. we never have to null out a reference to // an uninitialized proxy
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// (NOT (NOT_LIKE a b) ) => (LIKE a b)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//give the Interceptor a chance to modify property values
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//now we might need to recalculate the dirtyProperties array
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//use the current version
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// object loaded by update()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// ignore this row, the collection is in process of // being loaded somewhere further ""up"" the stack"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	* currently, not yet used..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// dirty check against the usual snapshot of the entity
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// wrap up any new collections directly referenced by the object // or its components
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// upgrade the lock if necessary: //lock(result, lockMode);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// (NOT (NE a b) ) => (EQ a b)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Sub-insertions should occur before containing insertion so // Try to do the callback now
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// (NOT (LE a b) ) => (GT a b)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// (NOT (GE a b) ) => (LT a b)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// (NOT (LT a b) ) => (GE a b)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//the entity is not associated with the session, so //try interceptor and unsaved-value"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// ... and the expected token type was an identifier, then:"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// igndore it...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// [jsd] The fix for HHH-558...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// If the token can tell us if it could be an identifier...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we are now at a new tree level
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// dirty check against the database snapshot, if possible/necessary"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the Interceptor handled the dirty checking
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Use the delegate.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//60 seconds
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// get meta's from <subclass>
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//ignore!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// get the id from the object
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// do the put outside the scope of the JTA txn
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//what is the version on the database?
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/// HHH-2378
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//stops flush being called multiple times if this method is recursively called
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//will result in a SQL UPDATE:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//else do nothing (don't even reassociate object!)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// no existing row - do an insert
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// --- Inner classes (moved here from sql-gen.g) ---
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// reference type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Use the delegate.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// should be the first, but just to be safe..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//return a proxy if appropriate
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// some filters affecting the collection are enabled on the session, so do not do the put into the cache."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ... and the token could be an identifer and the error is // a mismatched token error ...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If a where clause was specified in the update/delete query, use it to limit the // returned ids here..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// return new uninitialized proxy
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this object was already loaded
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Entity was found in second-level cache...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// intializes result by side-effect
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// NOTE : ( max - 1 ) because first is zero-based while max is not...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// A shallow query is ok (although technically there should be no fetching here...)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Delegate to the QueryLoader...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Remember the parameters for the compilation.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// -- Package local methods for the QueryLoader delegate --
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Delegate to the QueryLoader...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// double
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// double
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Use the token as an identifier.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//some statistics
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//safe from concurrent modification because of how entryList() is implemented on IdentityMap
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Transform the tree.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Parse the query string into an HQL AST.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//only needed during compilation phase...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Update the status of the object and if necessary, schedule an update"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Schedule updates to collections:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//the database has changed now, so the subselect results need to be invalidated"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// PHASE 1 : Parse the HQL into an AST.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//get a snapshot
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*public final Currency getCurrency(int col) throws HibernateException {		return (Currency) get(col);	}*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// right represents a joins originating from left...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//overriden to avoid System.exit
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If the query is already compiled, skip the compilation."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/* package-private */
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/* package-private */
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// remember that ordinal parameters numbers are 1-based!!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//overriden to avoid System.exit
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// all clear
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Ignore the token class name parameter, and use a specific token class."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//this is a query and we are loading multiple instances of the same collection role
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// EARLY EXIT!!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// before any callbacks, etc, so subdeletions see that this deletion happened first"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Ensures that containing deletions happen before sub-deletions
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// cascade-delete to collections BEFORE the collection owner is deleted
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// cascade-delete to many-to-one AFTER the parent was deleted
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if it is an initialized proxy, let cascade // handle it later on"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//assign the requested id to the proxy, *before* //reassociating the proxy"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//initialize properties of the event:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//return the id in the event object
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//TRANSIENT or DELETED
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// assume this is a newly instantiated transient object // which should be saved rather than updated
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this is a transient object with existing persistent state not loaded by the session
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// check two ""adjecent"" nodes at the top of the from-clause tree"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//cachedState,"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//a ""detached"" collection!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if the collection belonged to a different entity, // clean up the existing state of the collection"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//log.debug( ""calling onLoad()"" );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//EARLY EXIT!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//ie. the entity came in from update()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//we need to check even if it was not initialized, because of delayed adds!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//NOTE: EARLY EXIT!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// if template is null we just write the function out as it appears in the hql statement
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// find any entities that are still transient after retry
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Initialize SQL nodes here.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//EARLY EXIT!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Check the persistence context for an entry relating to this // entity to be merged...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//DELETED
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Set the unresolved path in this node and the parent. // Set the text for the parent.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// 60 second lock timeout
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*				 * Property prop = new Property(); prop.setName(""id"");				 * prop.setPropertyAccessorName(""embedded""); prop.setValue(id);				 * entity.setIdentifierProperty(prop);				 */"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//before cascade!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// continue...; we'll find out if it ends up not getting saved later
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// cascade first, so that all unsaved objects get their // copy created before we actually copy"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// check that entity id = requestedId
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Not a collection? // Return the entity property mapping.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		origin.addDestination(destination); // Add the query spaces."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//explicit = true;	// This is an explict Select. //ArrayList sqlResultTypeList = new ArrayList();"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//sqlResultTypeList.add( type ); // Generate the select expression.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c)."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//before cascade!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// cascade first, so that all unsaved objects get their  // copy created before we actually copy"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//copyValues works by reflection, so explicitly mark the entity instance dirty"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// no need to even collect this information if the persister is considered multi-table
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// as soon as we encounter our first letter, return the substring // from that position"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//for arrays, replaceElements() may return a different reference, since //the array length might not match"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// should not be able to reach last without maxPosition being set // unless there are no results
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If we have <tt>not-found=""ignore""</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// PERSISTER
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//maintain correct duplication if loaded in a cartesian product
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// local cache, so we use synchronization"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*DataSource unpooled = DataSources.unpooledDataSource(				jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS)			);*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//test out the optimizer:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*!persister.isCacheInvalidationRequired()*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// long
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Set the existing pool flag to true
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Validate that an alias name was provided to determine which pool to use
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// We have created the pool ourselves, so shut it down"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//the load() which takes an entity does not pass an entityName
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//it does not refer to an alias of a projection, //look for a property"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// do nothing for persistent instances
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//			option.setDataVersion( NonLockingDataVersion.INSTANCE );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//assume true, since we don't really know, and it doesn't matter"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Show the modified AST.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// NOTE : firstRow is zero-based
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Use the delegate.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Use the delegate.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Tell the dot node about the join type.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This 'dot' expression now refers to the resulting from element.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//otherwise recreate the mapping between the collection and its key
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Create a parameter specification for the collection filter...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Attach any mapping-defined ""ORDER BY"" fragments"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Make sure that the persister is versioned
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this function has a template -> redirect output and catch the arguments
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// use the id assigned to the instance
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If the data type is not an association type, it could not have been in the FROM clause."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//first look for a reference to a projection alias
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//first look for a reference to a projection alias
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If there are no collection fetches, then no further checks are needed"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Make #@%$^#^&# sure no alias is applied to the table name
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Delegate to the QueryLoader...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// switch
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Use the explicitly declared select expression; determine the // return types indicated by each select token
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// select clauses for insert statements should alwasy be treated as shallow
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// simple cache of param metadata based on query string.  Ideally, the // original ""user-supplied query"" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Use the delegate.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Alias references and identifiers use the same node class.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// make a new one
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,///////////////////////////////////////////////////////////////////////
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// these are just two unrelated table references
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// again, both should be FromElements"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// PHASE 2 : Analyze the HQL AST, and produce an SQL AST."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// PHASE 3 : Generate the SQL.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//			paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we are already processing a dot-structure
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Should mean that no such property was found
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Initialize the error handling delegate.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Was there an explicit select expression?
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Resolve everything up to this dot, but don't resolve the placeholders yet."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Just add a 'not' parent.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// First, save off the pertinent ids, as the return value"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// First, save off the pertinent ids, saving the number of pertinent ids for return"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Start performing the deletes
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Don't forget to resolve the argument! // Resolve the collection function now.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// otherwise, everything ok."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Re-arrange the tree so that the collection function is the root and the lhs is the path.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//    protected RegionRootListener listener;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// inject the WHERE after the parent
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Never include subclasses for implied from elements.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Establish the region root node with a non-locking data version
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            "
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Prepare the left hand side and get the data type.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Prepare the left hand side and get the data type.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If this dot has already been resolved, stop now."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// PROPERTIES
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The property is another class..
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Otherwise, this is a primitive type."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Use the delegate.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// For Timestamps, we default to a separate config"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//optimistic-lock=""all"", include all updatable properties //optimistic-lock=""dirty"", include all properties we are updating this time"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock=""false"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// NOTE : addDuplicateAlias() already performs nullness checks on the alias.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_0
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// again, null != null here"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we know only the lhs-hand type, so use that"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the referenced node text is the special 'id'
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// only the identifier property field name can be a reference to the associated entity's PK...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Append the new property name onto the unresolved path.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Tell the destination fromElement to 'includeSubclasses'.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If the lhs is a collection, use CollectionPropertyMapping"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Don't resolve the node again.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//lists, arrays //sets, maps, bags"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we have something like : ""? [op] rhs"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Configure the cache to use our TM
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Make sure JBC doesn't look one up
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we finish all the ""removes"" first to take care of possible unique // constraints and so that we can take better advantage of batching"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Make sure we don't re-release the same cache
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// We use a different delegate than the non-optimistic superclass default
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we have something like : ""lhs [op] ?"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//isSet = collection.isSet(); //isSorted = collection.isSorted();
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we know only the rhs-hand type, so use that"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// long
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Double check the distributed cache
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Get an exclusive right to update JBC for this key from this node.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// one or the other needs to be a datetime for us to get into this method in the first place...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// #2
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// nothing to do
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Add the condition to the join sequence that qualifies the indexed element.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Now, set the text for this node.  It should be the element columns."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Get the function return value type, based on the type of the first argument."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This will call initialize(tok)!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// mutation depends on the types of nodes invloved...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// logic operators by definition resolve to booleans
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Generated select expressions are already resolved, nothing to do."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The path may be a reference to an alias defined in the parent query.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The HQL class alias refers to the class name.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Associate the table alias with the element.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// try the parent FromClause...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Make sure that all from elements registered with this FROM clause are actually in the AST.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Invoke setScalarColumnText on each constructor argument.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Collect the select expressions, skip the first child because it is the class name."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// return an empty Type array
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// We ensure ASYNC semantics (JBCACHE-1175)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if there is no order by, make one"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Initial load from JBC
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Find the WHERE; if there is no WHERE, find the FROM..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Now, inject the newly built ORDER BY into the tree"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// logic operators by definition resolve to boolean.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Render the identifier select fragment using the table alias.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// will still be issued when it used to be null
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Otherwise, use the property mapping."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// We ensure ASYNC semantics (JBCACHE-1175)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The standard comparator types are not Serializable but are singletons
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ignore!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ignore it
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Generate implicit joins, only if necessary."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If the property is a special collection property name, return a CollectionPropertyMapping."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Collection of components.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// construct the cache
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// local cache, so we use synchronization"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//ie. 60 seconds
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// We need to seed the version value as part of this bulk insert
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// make sure the lhs is ""assignable""..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// false indicates to not generate parens around the assignment
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// currently allowed...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// in non-select queries, the only time we should need to join is if we are in a subquery from clause"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//return classAlias == null ? className : classAlias;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This is an explicit FROM element.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Fetch can't be used with scroll() or iterate().
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// If it's not implied or it is implied and it's a many to many join where the target wasn't found.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we need to wrtap the param in a cast()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Since this is an explicit FROM element, it can't be implied in the FROM clause."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Do nothing, eplicit from elements are *always* in the projection list."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// propertyName refers to something like collection.size...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// property name is a sub-path of a component...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Always add the collection's query spaces.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Notify the FROM element that it is being referenced by the select.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// logic operators by definition resolve to booleans
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// DotNode uses null here...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// We represent a from-clause alias
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we are the RHS of the DOT representing a naked comp-prop-ref
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we represent a naked (simple) prop-ref
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// assume this ident's text does *not* refer to a property on the given persister
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// just ignore it for now, it'll get resolved later..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// This is not actually a constant, but a reference to FROM element."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// check to see if our ""propPath"" actually // represents a property on the persister"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// these pieces are needed for usage in select clause
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// assume we do *not* refer to a property on the given persister
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// TRUE if the pool is borrowed from the outside, FALSE if we used to create it"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// assume we do *not* refer to a property on the given persister
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// get a connection from the pool (thru DriverManager, cfr. Proxool doc)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// set the Transaction Isolation if defined
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// naked property-refs cannot be used with an aliased from element
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// do *not* over-write the column text, as that has already been // ""rendered"" during resolve"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Look up class name using the first identifier in the path.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// toggle autoCommit to false if set
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Add to the query spaces.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// return the connection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If the from element isn't in the same clause, create a new from element."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// super-duper-classic-parser-regression-testing-mojo-magic...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Get the configurator files (if available)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// A collection of entities...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// A collection of components...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Default the Proxool alias setting
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// A collection of scalar elements...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Validate that an alias name was provided to determine which pool to use
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Validate that an alias name was provided to determine which pool to use
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Don't include sub-classes for implied collection joins or subquery joins.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Treat explict from elements in sub-queries properly.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Append the stem to the proxool pool alias
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Configured using the JAXP Configurator
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Append the stem to the proxool pool alias
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Append the stem to the proxool pool alias
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Configured using the Properties File Configurator
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Remember Isolation level
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// If the provider was leeching off an existing pool don't close it
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// the ""root from-element"" in correlated subqueries do need this piece"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Create the FROM element for the target (the elements of the collection).
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If the join is implied, then don't include sub-classes on the element."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// not really a many-to-one association *necessarily*
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// not really a many-to-one association *necessarily*
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//always overwrite nonversioned data
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//public Currency getCurrency(int col) throws HibernateException;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Get the class name of the associated entity.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// default is POJO
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// use setParameter for null values
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//  origin, path, implied, columns, classAlias,"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*implied*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// For implied many-to-many, just add the end join."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Interceptor returned null, so do the dirtycheck ourself, if possible"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// use setParameter for null values
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Note this!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Error message constants.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the standard SQL function name is current_timestamp...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//scan for next non-whitespace token
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This causes the factory to instantiate the desired class.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//private Type[] sqlResultTypes;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//private CacheEntry cacheEntry;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Frontbase has no known variation of a ""SELECT ... FOR UPDATE"" syntax..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*public Type[] getSqlResultTypes() {		return sqlResultTypes;	}*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//sqlResultTypeList.addAll( constructorArgumentTypeList );
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//sqlResultTypeList.add( type );
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Always add the type to the return type list.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// have the entity entry perform post-update processing, passing it the // update state and the new version (if one)."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// this entity defines proeprty generation, so process those generated // values..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// add the fetched entities
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Get ready to start adding nodes.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//EARLY EXIT!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*|| oj.getJoinable().consumesCollectionAlias() */
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// just especially for the trivial collection filter
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// need to look it up from the persistence-context
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//sort first by role name
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//update last non-whitespace token, if necessary"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//then by fk
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*sqlResultTypeList,*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// nothing to do		"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*ArrayList sqlResultTypeList,*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// nothing to do
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//notAfterClassTokens.add("","");"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//beforeClassTokens.add(""new""); DEFINITELY DON'T HAVE THIS!!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//TODO:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// remove initial "", """
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Add the type to the list of returned sqlResultTypes.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Generate the select expression.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// now update all changed or added rows fks
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//			boolean put = persister.getCache().insert(ck, cacheEntry);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Skip 'DISTINCT' and 'ALL', so we return the first expression node."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Generate the property select tokens.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Get the function name node.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_0
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Method expressions in a SELECT should always be considered scalar.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// areturn // return the value of the field
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//do nothing - we only need to notify the cache...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//sort first by entity name
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// If this is 'elements' then create a new FROM element.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//then by id
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Not elements(x)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Dialect function
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// to be safe...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Collection 'property function'
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If the constant is an IDENT, figure out what it means..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// no transformations took place, so handle it as we would a // non-instrumented class"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// IDENT is a class alias in the FROM.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Resolve to an identity column.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// see if the entry represents a class file
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Otherwise, it's a literal."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the name of an entity class
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// see if the entry represents a class file
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//the class discriminator value
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Add a space before the display text.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// intentionally empty
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Find or create the WHERE clause
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// child == parent.getFirstChild()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// set the name of bulk accessor.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_0
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_0
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// invokespecial
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// return
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Find or create the WHERE clause
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_1 // load bean
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters()."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// checkcast // cast bean
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Put the FILTERS node before the HQL condition and theta joins
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// astore_3 // store bean
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// add the current fragment to the FILTERS node
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Create a new THETA_JOINS node as a parent of all filters
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_2 // args
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Put the THETA_JOINS node before the HQL condition, after the filters."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// First, try to get the persister using the given name directly."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// iconst_i // continue to aastore // growing stack is 1
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// unable to locate it using this name
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If that didn't work, try using the 'import' name."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// locate the registered function by the given name
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// determine the type of the first argument...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_0
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Append the text of the current node.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If the node has a first child, recurse into the first child."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// new
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If there is a second child (RHS), recurse into that child."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// dup
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_3 // load the raw bean
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// invokeinterface
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// invokevirtual
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// invokevirtual
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aastore // args
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// istore_3 // store i
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_1 // load the bean
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/* current stack len = 0 */
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Iterate through the alias,JoinSequence pairs and generate SQL token nodes."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this is used during SqlGenerator processing
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// start region to handling exception (BulkAccessorException)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If there is a FROM fragment and the FROM element is an explicit, then add the from part."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*&& StringHelper.isNotEmpty( frag )*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// iinc 3, 1"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// The FROM fragment will probably begin with ', '.  Remove this if it is present."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload 4 // load the raw bean
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// oracle sql-state code for deadlock
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_2 // load the args
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Otherwise, try to use the no-arg constructor"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// iconst_i
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// eat it and try next
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aaload
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// checkcast
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//default mode
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// checkcast (case of reference type)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/* current stack len = 2 */
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// end region to handling exception (BulkAccessorException)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// register in exception table
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Private constructor - stops checkstyle from complaining.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//reset the dotcount (but not the path) //after reset!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_0
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//after reset!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_0
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// return
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// return
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// invokevirtual
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// checkcast
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// dotcount>=2
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/* local variables | target obj | each oldvalue | */
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// astore 5 // store exception
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload 5 // load exception
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/* | this | bean | args | raw bean | */
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// iload_3 // i
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Do the corresponding RHS
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// invokespecial // BulkAccessorException.<init>
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// athrow
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// WARNING: classfile only
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if its ""id"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//swallow
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//or its the id property name
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//join = q.createJoinFragment(useThetaStyleJoin);
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/* local variable | this | */
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//important!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// an association
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_0 // load this
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//allow index() function:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_0 // load this
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_1 // load callback
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// case of non-static field
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// log a message about potential connection leaks
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// getfield // get each field
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// invokeinterface // invoke Enabled.getInterceptFieldCallback()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ifnonnull
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// *return // each type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// *return // each type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// *store_1 // each type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//many-to-many
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ldc // name of the field
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//opening paren in new Foo ( ... )
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if we are inside a new Result(), but not inside a nested function"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// invokeinterface // invoke Callback.read*() // each type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//special case
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the name of an SQL function
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//this is basically a copy/paste of OrderByParser ... might be worth refactoring
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// return aliases not supported in classic translator!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// int
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//register collection role
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// return
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// The keyword used to specify an identity column, if identity column key generation is supported."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//.getElementPropertyMapping();
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// dup
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//following doesn't handle (null, not null) but unnecessary //since this would mean all rows"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// checkcast
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// checkcast
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//crossJoins.add(name);
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//ie no select clause in HQL
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// invokeinterface // enabled.getInterceptFieldCallback()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// invokeinterface // enabled.getInterceptFieldCallback()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ifnonnull (label1)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we are the LHS of the DOT representing a naked comp-prop-ref
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// *load_1
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// *load_1
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//ie. no select clause
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// putfield
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//there _was_ a select clause
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// return ;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ldc // field name
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// getfield // old value of the field
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// reference type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// return the concrete type, or the underlying type if a concrete type // was not specified"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//many-to-many
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// reference type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// not array
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// array of reference type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//q.addCollection(collectionName, collectionRole);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// boolean
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// char
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// short
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// classic parser does not support bulk manipulation statements
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// double
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_0
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// float
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// float
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This is called when it's time to fully resolve a path expression.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// long
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// can't cache this stuff either (per-invocation)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This is the legacy behaviour for HQL queries...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// long
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// bad type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// bad type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// not known!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// boolean, byte, char, int, short"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// not known!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// boolean, byte, char, int, short"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// not known!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// reference type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// not known!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//Need this, since join condition can appear inside parens!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// double
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// float
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// float
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// bad type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// bad type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// boolean, byte, char, int, short"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//expressionOpeners.add("",""); // deliberately excluded"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// skip finalize methods
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Mainly for OSCache
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//decrement the lock
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//recache the updated state
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// noop
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//null clientLock is remotely possible but will never happen in practice
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//by requiring <, we rely on lock timeout in the case of an unsuccessful update!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// the user provided resulttransformer, not the one used with ""select new"". Here to avoid mangling // transformed/non-transformed results."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// disassemble positional parameters
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//ie. 60 seconds
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// noop
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and ""do the right thing"" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//noop
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//noop
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this is called from SettingsFactory irregardless; trivial to simply disregard
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Do nothing; subclasses may override.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Do nothing; subclasses may override.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// TABLE
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Inside a BETWEEN ... AND ... expression
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//ie. a many-to-many
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//Cope with [,]"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Cope with a continued path expression (ie. ].baz)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//NOTE: early return
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Cope with a subselect
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// use the id value of a newly instantiated instance as the unsaved-value
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Close extra brackets we opened
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//take note when this is a boolean expression
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// no-op; CCS did not have such a concept
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// no-op; CCS did not have such a concept
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// assumes that types are all of span 1
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//process a token, mapping OO path expressions to SQL expressions"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Open any extra brackets we might need.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//Cope with special cases of AND, NOT, )"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the next one up must also be
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Add any joins
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//named query parameter
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// get meta's from <hibernate-mapping>
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// get meta's from <class>
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//path expression
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// DB-OBJECTNAME
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// just decrement the lock, don't recache // (we don't know which transaction won)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// saves / updates don't cascade to uninitialized collections
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// MUTABLE
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// WHERE
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// CHECK
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// POLYMORPHISM
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// properties that we have tried to load, and not found in the database"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// TODO:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// persists don't cascade to uninitialized collections
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//anything else
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the path expression continues after a ]
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// careful with this!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the path expression ends at the ]
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// ""finish off"" the join"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//NOTICE: no "" or . since they are part of (compound) identifiers"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//cannot instantiate
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// start by looking for HQL keywords...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// inner joins can be abbreviated to 'join'
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// 'outer' is optional and is ignored
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// now anything that is not a HQL keyword
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// process the ""old"" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// treat it as a classname
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// treat it as a path expression
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// starts with a path expression (new style)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ID
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//allow ODMG OQL style: from Person p, p.cars c"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//handle quoted strings
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// VERSION / TIMESTAMP
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// DISCRIMINATOR
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Primary key constraint
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// ""finish off"" the join"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//ignore whitespace
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//do replacements
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//handle HQL2 collection syntax
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// uuid.hex is deprecated
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//hilo params
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//sql = query;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//for EJB3
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// performance opt
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//sql = update;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// DISCRIMINATOR
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//hilo config
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// so we ""clock over"" on the first invocation"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys ""support"" :("
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//throw new IdentifierGenerationException(""save associated object first, or disable cascade for inverse association"");"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//count++;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// go ahead and set the lazy here, since pojo.proxy can override it."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// DYNAMIC UPDATE
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// IMPORT
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// BATCH SIZE
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we need to dirty check collections, since they can cause an owner // version number increment"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// SELECT BEFORE UPDATE
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// OPTIMISTIC LOCK MODE
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// intentionally empty
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//first element of array is reserved for the actual instance we are loading!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//keep the behavior consistent even for boundary usages
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// so we ""clock over"" on the first invocation"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// do nothing until we hit the rsult set containing the generated id
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Use the delegate, resolve identifiers as FROM element aliases."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// PERSISTER
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// CUSTOM SQL
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Loaded entity instances, by EntityKey"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// if the given name is un-qualified we may neen to qualify it
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the default...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// cascade-save to many-to-one BEFORE the parent is saved
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// get meta's from <subclass>
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// properties
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// joined subclasses
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// KEY
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// CHECK
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// properties
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// intentionally empty
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// KEY
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//even process null collections
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//keep the existing version number in the case of replicate!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// substitutes into values by side-effect
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Identity map of CollectionEntry instances, by the collection wrapper"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// TABLENAME
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// join.getKey().setType( new Type( lazz.getIdentifier() ) );
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// PROPERTIES
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// prepare and execute the insert
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// COLUMN(S)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if everything went ok, commit the transaction and close the obtained // connection handle..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// prepare and execute the insert
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//fetch the generated id in a separate query
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we just hit the last position
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// scroll ahead
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// scroll backward
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// column index
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we have not yet hit the last result...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//column unique-key
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Caches
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Generators:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// cache region is defined by the root-class in the hierarchy...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// PROPERTIES
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//JNDI + Serialization:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//checking for named queries
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//stats
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// EntityNotFoundDelegate
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Check named HQL queries
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this will throw an error if there's something wrong.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//prevents this session from adding things to cache
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// look for the instance by uuid
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//for a dynamic-class
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//test this entity to see if we must query it
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//NOTE EARLY EXIT
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// for backward-compatability
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ignore this error for now
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// look for existing collection as part of the persistence context
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Make sure this is a defined parameter and check the incoming value type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// for each of the defined parameters, make sure its value // has been set"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//we never need to apply locks to the SQL
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// cache the actual id of the object, not the value of the // property-ref, which might not be initialized"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// select-range is terminated by declaration of ""from"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// for an any
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// insertable simply because that is the user did not specify // anything; just override it
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// properties generated on update can never be updateable...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// updateable only because the user did not specify  // anything; just override it
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// the user specifically supplied update=""true"", // which constitutes an illegal combo"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ROLENAME
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//final boolean forceCacheRefresh,"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// first, try to load it from the temp PC associated to this SS"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// otherwise immediately materialize it
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/////////////////////////////////////////////////////////////////////////////////////////////////////
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// no auto-flushing to support in stateless session
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// FETCH STRATEGY
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// TABLE
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//after setting values to object, entityMode"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// SORT
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// do a check
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// CUSTOM SQL
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// unsorted, natural, comparator.class.name"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// set up second pass
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// do not auto-flush while outside a transaction
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this is an internal error of some sort...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//do not return a proxy! //(this option indicates we are initializing a proxy)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ignore
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// for an any // we will have to use reflection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// not for internal use:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// otherwise, we only need to flush if there are in-memory changes // to the queried tables"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// aload_0
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//stops flush being called multiple times if this method is recursively called
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// decode row selection...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// basically just an adapted copy of find(CriteriaImpl)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ignore this error for now
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we need to writeObject() on this since interceptor is user defined
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the old-time stand-by...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// parameter bind values...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// use old (HB 2.1) defaults if outer-join is specified
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we have a CGLIB enhanced entity
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we have a CGLIB enhanced entity
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we have a Javassist enhanced entity
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we have a Javassist enhanced entity
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// should *not* need to grow beyond the size of the total number of columns in the rs
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// should probably no-op commit/rollback here, at least in JTA scenarios"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// explicitly perform no checking...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// used from testsuite
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// assume we are in an auto-commit state
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*package*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// GENERATOR
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// register synch; stats.connect()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// calls executeBatch()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//no big deal
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// no big deal
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// no big deal
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// see explanation above...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If we are in the process of releasing, no sense // checking for aggressive-release possibility."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// EARLY EXIT!!!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// ResultSet impl (""overridden"") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ID UNSAVED-VALUE
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// VERSION UNSAVED-VALUE
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// not necessarily a *unique* property reference
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Bind the where
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// refer to comment in StatefulPersistenceContext.addCollection()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Note : success = false, because we don't know the outcome of the transaction"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Bind the order-by
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Bind the filters
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// overriding inherited meta attribute. HBX-621 & HBX-793			"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//+ ""_"" + referencedColumnName not used for backward compatibility"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//SessionFactory name:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//JDBC and connection settings:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//JDBC and connection settings:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Interrogate JDBC metadata
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// user supplied JDBC connections
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Transaction settings:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//SQL Generation settings:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Query parser settings:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Second-level / query cache:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//SQL Exception converter:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Statistics and logging:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		settings.setShowSqlEnabled(showSql);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//postInitialize() will be called after initialization
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		settings.setFormatSqlEnabled(formatSql);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// cannot handle single quotes
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Schema export:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// todo : for 4.0 //	private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); // this is the legacy logging 'category'..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//if dotted and not load-collection nor return-join //regular property
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// don't even bother trying to read further
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 //	private BytecodeProvider bytecodeProvider;"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// generated properties can *never* be insertable...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	public ComponentTuplizerFactory getComponentTuplizerFactory() { //		return componentTuplizerFactory; //	}"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	public BytecodeProvider getBytecodeProvider() { //		return bytecodeProvider; //	} // //	void setBytecodeProvider(BytecodeProvider bytecodeProvider) { //		this.bytecodeProvider = bytecodeProvider; //	}"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// using local since the inheritedMetas at this point is not the correct map since it is always the empty map
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	protected List extendsQueue;"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		extendsQueue = new ArrayList();"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		componentTuplizerFactory = new ComponentTuplizerFactory();"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if doc is null, then for whatever reason, the cached file cannot be used..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// position cursor to the last row
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Read backwards until we read past the first physical sequential // row with the key we are interested in loading
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This method may be called many times!!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// force the proxy to resolve itself
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this is equivalent to the old behavior...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if null, owner will be retrieved from session"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//			Iterator iterator = extendsQueue.iterator();"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		Iterator iter = extendsQueue.iterator();"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// found
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// found
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//final String queryString, "
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	private final List extendsQueue;"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//<String, String>"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//<String, String>"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// invokeinterface
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//end of array, start filling again from start"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//orphan delete not supported for EntityMode.DOM4J
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//element = XMLHelper.generateDom4jElement( persister.getNodeName() );
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// intentionally empty
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//we can reuse it for each row
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//orphan delete not supported for EntityMode.DOM4J
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//can't reuse in this case
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//element = XMLHelper.generateDom4jElement( persister.getNodeName() );
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//needed for SOAP libraries, etc"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//EARLY EXIT!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// any earlier proxy takes precedence
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// First we need to suspend any current JTA transaction and obtain // a JDBC connection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//getResultList(results);
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if we only returned one entity, query by key is more efficient"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the element has been removed from the set
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the element has changed
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Careful: these methods do not initialize the collection.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//needed so that we remove this collection from the second-level cache
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// override on some subclasses
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//override on some subclasses
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//do this bit after setting initialized to true or it will recurse
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// create the collection holding the Orphans
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// iterate over the *old* list
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// intentionally empty
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*(array==null) ? tempList.get(i) :*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the ""currentDepth - 1"" bit)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//write(); -- doesn't
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//write(); -- doesn't
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this is the regression style determination which matches the logic of the classic translator
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// handle empty collection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//handle empty collections
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//needed for SOAP libraries, etc"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// finally, what it's all about..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// here we do not bother with the discriminator.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// validate() instances of Validatable
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//null version means the object is in the process of being loaded somewhere else in the ResultSet
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//problematic for <key-many-to-one>!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//use the id passed in
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The property is a collection...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//a shortcut if its location didn't change!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//search for it //note that this code is incorrect for other than one-to-many
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//a composite key
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if no batch, use ""foo = ? and bar = ?"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//it must be a collection fetch
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// needed later for many-to-many/filter application
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*&& etype.isReferenceToPrimaryKey()*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// it might still need to apply a collection ordering based on a // many-to-many defined order-by...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// belong to other persister // belong to other persister
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we found it
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//we can use an inner join for the many-to-many
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//disable a join back to this same association
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//the user visible aliases, which are unknown to the superclass, //these are not the actual ""physical"" SQL aliases"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Let return-propertys override whatever the persister has for aliases.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//alias may be null //EARLY EXIT
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// if it is a compound path
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if its the root criteria, we are done"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// otherwise, recurse"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//the criteria instance
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the entity name
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//not found in inner query , try the outer query"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//not found in inner query , try the outer query"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//it refers to an alias of a projection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//should never happen, i think"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Convert the string value into the proper type.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//needed for SOAP libraries, etc"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//it does not refer to an alias of a projection, //look for a property"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//search for it //note that this code is incorrect for other than one-to-many
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Otherwise, this is an ordinary value."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Currently *not* cachable if autodiscover types is in effect (e.g. ""select * ..."")"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// List OPERATIONS:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	private final String[] sqlAliases; //	private final String[] sqlAliasSuffixes;"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this is only needed (afaict) for ResultTransformer processing...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// determine if the collection elements are entities...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// replace {....} with corresponding column aliases
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// apend everything up until the next encountered open brace
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//pad with nulls from the current last element up to the new index
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// it is a simple table alias {foo}
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// passing through anything we do not know : to support jdbc escape sequences HB-898
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// passing through anything we do not know : to support jdbc escape sequences HB-898
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The current alias is referencing the collection to be eagerly fetched
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// it is a property reference {foo.bar}
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*package*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//NOTE: EARLY EXIT!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	private final List scalarTypes = new ArrayList(); //	private final List scalarColumnAliases = new ArrayList();"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Now, process the returns"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// already been processed...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// already been processed...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Make sure the owner alias is known...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		scalarColumnAliases.add( typeReturn.getColumnAlias() ); //		scalarTypes.add( typeReturn.getType() );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If this return's alias has not been processed yet, do so b4 further processing of this return"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//			collectionOwnerAliases.add( ownerAlias );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//needed for SOAP libraries, etc"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//needed for SOAP libraries, etc"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// from Map
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// from SortedMap
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// cannot be instantiated
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//inject the data
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//default pool size 20
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if debug level is enabled, then log the password, otherwise mask it"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// register a cleanup synch
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// wrap the session in the transaction-protection proxy
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// then bind it
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// this property belongs on the table and is to be inserted
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// limit the methods available if no transaction is active
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// allow these (deprecated) methods to pass through
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//EARLY EXIT
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Initialize the error handling delegate.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//cannot be instantiated
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//private String propertyName;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Use the delegate.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//String[] fk = StringHelper.qualify( ""collection_"", cp.getKeyColumnNames() );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//"" collection_ where "" +"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//unsupported
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//unsupported
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// if not a composite key, use ""foo in (?, ?, ?)"" for batching // if no batch, and not a composite key, use ""foo = ?"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// currently only the Hibernate-supplied DbTimestampType is supported here
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//cannot be instantiated
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This is called when it's time to fully resolve a path expression.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//implicit polymorphism not supported (would need a union)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//pull off the last "", """
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//$NON-NLS-1
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//always do an INSERT, and let it fail by constraint violation"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//by default, natural-ids are ""immutable"" (constant)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// make a new one
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// astore 4 // store the raw bean
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// NOTE : firstRow is zero-based
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// grrr... for differentiation of mysql storage engines
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/* current stack len = 0 */
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//String[] keyCols = collPersister.getKeyColumnNames();
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Oracle did add support for ANSI CASE statements in 9i
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the standard SQL function name is current_timestamp...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//refresh() does not pass an entityName
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Informix doesn't have a bit type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// (NOT (GT a b) ) => (LE a b)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// strip table-owner because Informix always returns constraint names as ""<table-owner>.<constraint-name>"""
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//pre H3.2 behavior: super.getReturnType(ct, m);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// finally use the sqltype if == on Hibernate types did not find a match.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//because numeric can be anything
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// standard sql92 functions (can be overridden by subclasses)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//private Type[] sqlResultTypes;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// by default we report no support
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//sqlResultTypes = selectClause.getSqlResultTypes();
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// by default we report no support for NOWAIT lock semantics
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//by default
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// This is now handled earlier in this method.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// -- Loader implementation --
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// -- Loader overrides --
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// here assume SQLServer2005 using snapshot isolation, which does not have this problem"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//NONE, because its the requested lock mode, not the actual! "
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// --- Query translator methods ---
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Oracle8 and previous define only a ""DATE"" type which //      is used to represent all aspects of date/time"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//starts with 1, implicitly"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//"" cascade"";"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// -- Implementation private methods --
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//trim off the length/precision/scale
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// CHECK VIOLATION
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// UNIQUE VIOLATION
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// FOREIGN KEY VIOLATION
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// to support dialects that have their own identity data type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// NOT NULL VIOLATION
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ALL OTHER
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Register the type of the out param - PostgreSQL uses Types.OTHER
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// seems to have spotty LOB suppport
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// HHH-2300
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ignore (probably H2 not in the classpath)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Prepare the left hand side and get the data type.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//used also for generation of FK names!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//usually useless
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//do not add unique constraint on DB not supporting unique and nullable columns
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//for backward compatibility, disable this:"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//may be final //may be final //may be final
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//may be final
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// may be final
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Custom SQL
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Primary key constraint
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ignore it...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// not null is implicit
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Display the dialect version.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// nothing to do in a stateful session
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// The RDMS concat() function only supports 2 parameters
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//flat recursive algorithm
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/* current stack len = 0 */
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Custom SQL
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Primary key constraint
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Original Dialect.java returns "" for update"";"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//pass the column name (a generated id almost always has a single column)
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//needed to satisfy KeyValue
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Verify the state of this new method in Hibernate 3.0 Dialect.java
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Origial Dialect.java returns true;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// index should be last column listed
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// *** Sequence methods - start. The RDMS dialect needs these
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// methods to make it possible to use the Native Id generator
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if it is a formula index, use the element columns in the PK"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// *** Sequence methods - end
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// }
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//starts with 1, implicitly"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Used with DROP TABLE to delete all records in the table.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// no foreign key element of for a one-to-many
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//TODO: we could just return all false...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// the object is persistent
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// RDMS supports the UNION ALL clause.
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Multi-param dialect functions...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// function templates
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//TODO: we could just return all false...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//not null is implicit
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// this assumes schema support, which is present in 1.8.0 and later..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//columnUpdateability.length==0 ||
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// HSQLDB only supports READ_UNCOMMITTED transaction isolation
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//the entity is associated with the session, so check its status"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Multi-param string dialect functions...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Multi-param numeric dialect functions...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Multi-param date dialect functions...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// simple nullability constraint
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// return
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//	register the type of the out param - an Oracle specific type"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// new methods in dialect3
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*public boolean supportsForUpdateNowait() {		return false;	}*/"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// TimesTen has no known variation of a ""SELECT ... FOR UPDATE"" syntax..."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// iterate entries ordered by capacity to find first fit
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// add new ordered map
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// expected type is intrinsic here...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//}
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//}
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//return memberPersister.getPropertyType(propertyName);
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//return memberPersister.toColumns(alias, propertyName);"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//return memberPersister.getType();
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*&& !indexIsFormula*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		return !isOneToMany();"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//instanceof AssociationType;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// we need to determine the best way to know that two joinables // represent a single many-to-many...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//strip leading ','"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//public boolean isSubselectLoadable();
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//columns
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//SQL statements
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//extra information about the element type
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//types
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// sql server just returns automatically
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// custom sql
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//private final String unquotedIdentifierColumnName;
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		return ""select CURRENT_TIMESTAMP from RDB$DATABASE"";"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// dynamic filters specifically for many-to-many inside the collection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// dynamic filters for the collection
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//registerColumnType data types
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// IBID for current_time and current_date
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked ""resident"" (a status which doesn't replicate)"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Tell hibernate to use getBytes instead of getBinaryStream
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// No batch statements
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//ELEMENT
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"/*		 * We might want a special case for 19,2. This is very common for money types		 * and here it is converted to 18,1		 */"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//no pointbase BIT
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//no pointbase TINYINT
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// NativeSQL: collect element column and auto-aliases
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// INDEX AND ROW SELECT
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//starts with 1, implicitly"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// NativeSQL: collect index column and auto-aliases
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// here assume SQLServer2005 using snapshot isolation, which does not have this problem"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		registerColumnType( Types.CLOB, 16777215, ""mediumtext"" ); //		registerColumnType( Types.CLOB, 65535, ""text"" );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		registerColumnType( Types.VARCHAR, 16777215, ""mediumtext"" ); //		registerColumnType( Types.VARCHAR, 65535, ""text"" );"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//starts with 1, implicitly"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//GENERATE THE SQL:
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/* package-private */
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//not all classpersisters implement PropertyMapping!
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Handle any filters applied to this collection for many-to-many
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//if there is a user-specified loader, return that //TODO: filters!?"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// Take care of any entities that might have // been evicted!	"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//strip leading ','"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Run a subquery loader
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//Sybase BIT type does not support null values
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads)."
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//needed by arrays
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// ignore
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,"//		 This assumes you will want to ignore any update counts"
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//TODO: something with formulas...
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//an assertion
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,// Remove all the old entries
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/* local variables | target obj | each oldvalue | */
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//create all the new entries
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*&& !indexIsFormula*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,/*&& !indexIsFormula*/
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//delete all the deleted entries
hibernate-distribution-3.3.2.GA,WITHOUT_CLASSIFICATION,//insert all the new entries
